import { Context } from 'telegraf';
import { db } from '../services/database';
import { sendMessage } from '../utils/messages';
import { MESSAGES } from '../utils/messages';
import { getAdminKeyboard } from '../utils/keyboard';
import { logger } from '../utils/logger';
import { formatStats, formatDate, formatNumber } from '../utils/formatters';
import { ENV } from '../config/environment';
import { AdminAction, UserRole, WithdrawalStatus } from '../types/enums';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(userId: number): Promise<boolean> {
    return ENV.ADMIN_IDS.includes(userId.toString());
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
export async function handleAdminCommand(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;
        
        if (!await isAdmin(ctx.from.id)) {
            await ctx.reply('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
            return;
        }

        await sendMessage(
            ctx,
            'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            getAdminKeyboard()
        );

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function handleStats(ctx: Context): Promise<void> {
    try {
        if (!ctx.from || !await isAdmin(ctx.from.id)) return;

        const stats = await db.getAdminStats();
        const now = new Date();
        const statsMessage = 
            'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n' +
            `üìÖ –î–∞—Ç–∞: ${formatDate.full(now)}\n\n` +
            'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n' +
            `‚Ä¢ –í—Å–µ–≥–æ: ${formatNumber.default(stats.users.total)}\n` +
            `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${formatNumber.default(stats.users.active_24h)}\n` +
            `‚Ä¢ –ü–ª–∞—Ç—è—â–∏—Ö: ${formatNumber.default(stats.users.paid)}\n\n` +
            'üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:\n' +
            `‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber.default(stats.photos.total_processed)}\n` +
            `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${formatNumber.default(stats.photos.successful)}\n` +
            `‚Ä¢ –û—à–∏–±–æ–∫: ${formatNumber.default(stats.photos.failed)}\n\n` +
            'üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n' +
            `‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${formatNumber.currency(stats.payments.total_amount, 'RUB')}\n` +
            `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatNumber.currency(stats.payments.average_amount || 0, 'RUB')}`;

        await sendMessage(ctx, statsMessage, getAdminKeyboard());
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
export async function handleBroadcast(ctx: Context): Promise<void> {
    try {
        if (!ctx.from || !await isAdmin(ctx.from.id)) return;

        const args = ctx.message?.text?.split(' ');
        const broadcastMessage = args?.slice(1).join(' ');

        if (!broadcastMessage) {
            await sendMessage(
                ctx,
                'üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                '/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n\n' +
                '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞',
                getAdminKeyboard()
            );
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await db.getAllUsers();
        let sent = 0;
        let failed = 0;

        const total = users.length;
        const startTime = Date.now();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for (const [index, user] of users.entries()) {
            try {
                await ctx.telegram.sendMessage(
                    user.user_id,
                    broadcastMessage,
                    { parse_mode: 'HTML' }
                );
                sent++;

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (index % 100 === 0) {
                    const progress = ((index + 1) / total * 100).toFixed(1);
                    await ctx.reply(
                        `üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏: ${progress}%\n` +
                        `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n` +
                        `‚ùå –û—à–∏–±–æ–∫: ${failed}`
                    );
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
                await new Promise(resolve => setTimeout(resolve, 50));

            } catch (error) {
                failed++;
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
                    userId: user.user_id,
                    error
                });
            }
        }

        const duration = formatDate.relative(new Date(startTime));
        await sendMessage(
            ctx,
            `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n` +
            `‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n` +
            `‚Ä¢ –û—à–∏–±–æ–∫: ${failed}\n` +
            `‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}`,
            getAdminKeyboard()
        );

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
export async function handleWithdrawals(ctx: Context): Promise<void> {
    try {
        if (!ctx.from || !await isAdmin(ctx.from.id)) return;

        const pendingWithdrawals = await db.getPendingWithdrawals();
        
        if (pendingWithdrawals.length === 0) {
            await sendMessage(
                ctx,
                'üìù –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
                getAdminKeyboard()
            );
            return;
        }

        let message = 'üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n';
        
        for (const withdrawal of pendingWithdrawals) {
            const user = await db.getUserById(withdrawal.user_id);
            message += `üÜî ID: ${withdrawal.id}\n` +
                      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.username || withdrawal.user_id}\n` +
                      `üí∞ –°—É–º–º–∞: ${formatNumber.currency(withdrawal.amount, 'RUB')}\n` +
                      `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ${withdrawal.payment_details.details}\n` +
                      `üìÖ –î–∞—Ç–∞: ${formatDate.full(withdrawal.created_at)}\n\n`;
        }

        await sendMessage(
            ctx,
            message,
            {
                reply_markup: {
                    inline_keyboard: pendingWithdrawals.map(w => ([
                        {
                            text: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #${w.id}`,
                            callback_data: `admin_approve_withdrawal_${w.id}`
                        },
                        {
                            text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #${w.id}`,
                            callback_data: `admin_reject_withdrawal_${w.id}`
                        }
                    ]))
                }
            }
        );

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function handleBanUser(ctx: Context): Promise<void> {
    try {
        if (!ctx.from || !await isAdmin(ctx.from.id)) return;

        const args = ctx.message?.text?.split(' ');
        const userId = parseInt(args?.[1] || '');
        const reason = args?.slice(2).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';

        if (!userId) {
            await sendMessage(
                ctx,
                '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' +
                '/ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]',
                getAdminKeyboard()
            );
            return;
        }

        await db.updateUserRole(userId, UserRole.BANNED);
        await db.addBanRecord(userId, ctx.from.id, reason);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.telegram.sendMessage(
            userId,
            `üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
            `–î–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`
        ).catch(() => {});

        await sendMessage(
            ctx,
            `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
            getAdminKeyboard()
        );

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
export async function handleViewLogs(ctx: Context): Promise<void> {
    try {
        if (!ctx.from || !await isAdmin(ctx.from.id)) return;

        const args = ctx.message?.text?.split(' ');
        const count = parseInt(args?.[1] || '50');
        const type = args?.[2] || 'error';

        const logs = await db.getLatestLogs(count, type);
        
        let message = `üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${count} –ª–æ–≥–æ–≤ (—Ç–∏–ø: ${type}):\n\n`;
        
        for (const log of logs) {
            message += `‚è∞ ${formatDate.full(log.timestamp)}\n` +
                      `üìù ${log.message}\n` +
                      `üîç ${JSON.stringify(log.metadata)}\n\n`;
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        const parts = message.match(/.{1,4000}/g) || [];
        
        for (const part of parts) {
            await sendMessage(ctx, part);
        }

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–æ–≤');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
export const adminHandlers = {
    handleAdminCommand,
    handleStats,
    handleBroadcast,
    handleWithdrawals,
    handleBanUser,
    handleViewLogs
};