import { Context } from 'telegraf';
import { isAdmin } from '../middlewares/auth';
import { broadcastService } from '../services/broadcast';
import { backupService } from '../services/backup';
import { db } from '../services/database';
import { sendMessageWithImage } from '../utils/messages';
import { PATHS } from '../config/environment';
import { getAdminKeyboard, getAdminStatsKeyboard, getSpecialOffersKeyboard } from '../utils/keyboard';
import { SpecialOffer } from '../types/interfaces';

// –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
export async function handleAdminCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) {
        return;
    }

    await ctx.reply(
        'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        getAdminKeyboard()
    );
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export async function handleStats(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        const stats = await db.getDetailedStats();
        
        const message = formatDetailedStats(stats);
        
        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.BALANCE,
            message,
            getAdminStatsKeyboard()
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function formatDetailedStats(stats: any): string {
    return 'üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n' +
        'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n' +
        `‚Ä¢ –í—Å–µ–≥–æ: ${stats.users.total_users}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.users.active_today}\n` +
        `‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤: ${stats.users.total_credits}\n\n` +
        'üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–∑–∞ 24—á):\n' +
        `‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.photos.total_processed}\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.photos.successful}\n` +
        `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.photos.failed}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(stats.photos.avg_processing_time || 0)}—Å\n\n` +
        'üí∞ –ü–ª–∞—Ç–µ–∂–∏ (–∑–∞ 24—á):\n' +
        `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.payments.total_payments}\n` +
        `‚Ä¢ –°—É–º–º–∞: ${stats.payments.total_amount || 0}‚ÇΩ\n` +
        `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.payments.unique_users}\n\n` +
        'üéâ –ê–∫—Ü–∏–∏:\n' +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π: ${stats.offers.active_offers}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: ${Math.round(stats.offers.avg_discount || 0)}%`;
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export async function handleSpecialOffers(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    const activeOffers = await db.getActiveSpecialOffers();
    let message = 'üéâ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏</b>\n\n';

    if (activeOffers.length > 0) {
        message += '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:\n\n';
        activeOffers.forEach((offer, index) => {
            message += `${index + 1}. ${offer.title}\n` +
                      `–°–∫–∏–¥–∫–∞: ${offer.discount_percent}%\n` +
                      `–î–æ: ${new Date(offer.end_date).toLocaleDateString()}\n\n`;
        });
    } else {
        message += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π\n';
    }

    await ctx.reply(message, getSpecialOffersKeyboard());
}

export async function handleCreateSpecialOffer(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;
    
    await ctx.reply(
        'üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '–ù–∞–∑–≤–∞–Ω–∏–µ\n' +
        '–û–ø–∏—Å–∞–Ω–∏–µ\n' +
        '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏\n' +
        '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (DD.MM.YYYY)\n' +
        '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (DD.MM.YYYY)\n' +
        '–ú–∏–Ω–∏–º—É–º –∫—Ä–µ–¥–∏—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n' +
        '–ë–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }]
                ]
            }
        }
    );
}

// –ë—ç–∫–∞–ø—ã
export async function handleBackups(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    const backups = await db.getBackupHistory(5);
    let message = 'üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏</b>\n\n';

    if (backups.length > 0) {
        message += '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:\n\n';
        backups.forEach((backup, index) => {
            message += `${index + 1}. ${backup.filename}\n` +
                      `–†–∞–∑–º–µ—Ä: ${formatBytes(backup.size_bytes)}\n` +
                      `–°—Ç–∞—Ç—É—Å: ${backup.status}\n` +
                      `–°–æ–∑–¥–∞–Ω: ${new Date(backup.created_at).toLocaleString()}\n\n`;
        });
    } else {
        message += '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤\n';
    }

    await ctx.reply(
        message,
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì• –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø', callback_data: 'admin_create_backup' }],
                    [{ text: 'üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞', callback_data: 'admin_restore_backup' }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
                ]
            }
        }
    );
}

export async function handleCreateBackup(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        const backupMessage = await ctx.reply('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...');
        await backupService.createBackup();
        await ctx.telegram.editMessageText(
            ctx.chat!.id,
            backupMessage.message_id,
            undefined,
            '‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞');
    }
}

// –†–∞—Å—Å—ã–ª–∫–∏
export async function handleBroadcastCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.setAwaitingMessage(ctx.from.id);
    await ctx.reply(
        'üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' +
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_cancel_broadcast' }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
                ]
            }
        }
    );
}

export async function handleScheduleCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.setAwaitingDate(ctx.from.id);
    await ctx.reply(
        'üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        'DD.MM.YYYY HH:mm\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_cancel_broadcast' }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
                ]
            }
        }
    );
}

export async function handleCancelBroadcast(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.clearAwaiting(ctx.from.id);
    await ctx.reply(
        '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_back' }]
                ]
            }
        }
    );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
export async function handleSpecialOfferCreation(ctx: Context, text: string): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        const lines = text.split('\n');
        if (lines.length < 5) {
            await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.');
            return;
        }

        const [title, description, discountStr, startDateStr, endDateStr, minCreditsStr, extraCreditsStr] = lines;

        const offer: SpecialOffer = {
            title,
            description,
            discountPercent: parseInt(discountStr),
            startDate: parseDate(startDateStr),
            endDate: parseDate(endDateStr),
            minCredits: minCreditsStr ? parseInt(minCreditsStr) : undefined,
            extraCredits: extraCreditsStr ? parseInt(extraCreditsStr) : undefined
        };

        const offerId = await db.createSpecialOffer(offer);
        
        await ctx.reply(
            '‚úÖ –ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${title}\n` +
            `–°–∫–∏–¥–∫–∞: ${discountStr}%\n` +
            `–î–µ–π—Å—Ç–≤—É–µ—Ç: ${startDateStr} - ${endDateStr}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏—è–º', callback_data: 'admin_special_offers' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.');
    }
}

function parseDate(dateStr: string): Date {
    const [day, month, year] = dateStr.split('.');
    return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
}