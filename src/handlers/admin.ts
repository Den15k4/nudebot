import { Context } from 'telegraf';
import { isAdmin } from '../middlewares/auth';
import { broadcastService } from '../services/broadcast';
import { db } from '../services/database';
import { sendMessageWithImage } from '../utils/messages';
import { PATHS } from '../config/environment';

export async function handleAdminCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) {
        return;
    }

    await ctx.reply(
        'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' },
                        { text: 'üïí –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_schedule' }
                    ],
                    [
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_cancel_broadcast' }
                    ],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
                ]
            }
        }
    );
}

export async function handleBroadcastCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.setAwaitingMessage(ctx.from.id);
    await ctx.reply(
        'üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' +
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_cancel_broadcast' }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
                ]
            }
        }
    );
}

export async function handleScheduleCommand(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.setAwaitingDate(ctx.from.id);
    await ctx.reply(
        'üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        'DD.MM.YYYY HH:mm\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_cancel_broadcast' }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
                ]
            }
        }
    );
}

export async function handleCancelBroadcast(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    broadcastService.clearAwaiting(ctx.from.id);
    await ctx.reply(
        '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_back' }]
                ]
            }
        }
    );
}

export async function handleStats(ctx: Context): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        const stats = await db.getStats();
        
        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.BALANCE,
            'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n' +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
            `üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: ${stats.activeToday}\n\n` +
            `üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤:\n` +
            `‚Ä¢ –í—Å–µ–≥–æ: ${stats.creditsStats.total_credits || 0}\n` +
            `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${Math.round(stats.creditsStats.avg_credits || 0)}\n` +
            `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${stats.creditsStats.max_credits || 0}\n\n` +
            `üì© –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: ${broadcastService.getScheduledBroadcastsCount()}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats_refresh' },
                            { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }
                        ]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

export async function handleBroadcastMessage(ctx: Context, text: string, imageBuffer?: Buffer): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        let imagePath: string | undefined;
        if (imageBuffer) {
            imagePath = await broadcastService.saveTempImage(imageBuffer, ctx.from.id);
        }

        const result = await broadcastService.broadcast(text, imagePath);
        
        if (imagePath) {
            await broadcastService.deleteTempImage(imagePath);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
            `–£—Å–ø–µ—à–Ω–æ: ${result.success}\n` +
            `–û—à–∏–±–æ–∫: ${result.failed}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'action_back' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
}

export async function handleScheduledBroadcast(
    ctx: Context,
    date: Date,
    text: string,
    imageBuffer?: Buffer
): Promise<void> {
    if (!ctx.from || !await isAdmin(ctx.from.id.toString())) return;

    try {
        let imagePath: string | undefined;
        if (imageBuffer) {
            imagePath = await broadcastService.saveTempImage(imageBuffer, ctx.from.id, true);
        }

        const broadcastId = await broadcastService.scheduleBroadcast({
            date,
            message: text,
            image: imagePath,
            id: `scheduled_${Date.now()}`
        });

        await ctx.reply(
            `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
            `–î–∞—Ç–∞: ${date.toLocaleString()}\n` +
            `ID —Ä–∞—Å—Å—ã–ª–∫–∏: ${broadcastId}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'action_back' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
}