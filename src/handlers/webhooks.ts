import { Request, Response } from 'express';
import { db } from '../services/database';
import { paymentService } from '../services/payment';
import { bot } from '../index';

export async function handleClothoffWebhook(req: Request, res: Response) {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Clothoff:', {
            body: req.body,
            files: req.files
        });

        const body = req.body;
        const files = req.files as Express.Multer.File[] || [];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        if (body.status === '500' || body.img_message || body.img_message_2) {
            const user = await db.getUserByPendingTask(body.id_gen);
            if (user) {
                let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n';
                
                if (body.img_message?.includes('Age is too young') || 
                    body.img_message_2?.includes('Age is too young')) {
                    errorMessage = 'üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n' +
                                 '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.';
                } else {
                    errorMessage += body.img_message || body.img_message_2 || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                }

                await bot.telegram.sendMessage(user.user_id, errorMessage);
                await db.updateUserCredits(user.user_id, 1); // –í–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–∞
                await db.setUserPendingTask(user.user_id, null);
                await db.updatePhotoProcessingStats(user.user_id, false, errorMessage);
            }
            return res.json({ success: true });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (body.result || files.length > 0) {
            const user = await db.getUserByPendingTask(body.id_gen);
            if (user) {
                let imageBuffer: Buffer | undefined;
                if (body.result) {
                    imageBuffer = Buffer.from(body.result, 'base64');
                } else if (files.length > 0) {
                    imageBuffer = files[0].buffer;
                }

                if (imageBuffer) {
                    await bot.telegram.sendPhoto(
                        user.user_id,
                        { source: imageBuffer },
                        { 
                            caption: '‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'action_process_photo' }],
                                    [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'action_back' }]
                                ]
                            }
                        }
                    );
                    await db.updatePhotoProcessingStats(user.user_id, true);
                }

                await db.setUserPendingTask(user.user_id, null);
            }
        }

        return res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

export async function handleRukassaWebhook(req: Request, res: Response) {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Rukassa:', req.body);
        await paymentService.handleWebhook(req.body);
        return res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook Rukassa:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

export function handleHealth(_req: Request, res: Response) {
    return res.json({
        status: 'ok',
        timestamp: new Date().toISOString()
    });
}