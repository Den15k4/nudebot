import { Request, Response } from 'express';
import { db } from '../services/database';
import { broadcastService } from '../services/broadcast';
import { paymentService } from '../services/payment';
import { bot } from '../index';
import { PATHS } from '../config/environment';
import { getMainKeyboard } from '../utils/keyboard';

export async function handleClothoffWebhook(req: Request, res: Response): Promise<void> {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Clothoff:', {
            body: req.body,
            files: req.files
        });

        const body = req.body;
        const files = req.files as Express.Multer.File[] || [];

        if (body.status === '500' || body.img_message || body.img_message_2) {
            const user = await db.getUserByPendingTask(body.id_gen);
            if (user) {
                let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n';
                
                if (body.img_message?.includes('Age is too young') || 
                    body.img_message_2?.includes('Age is too young')) {
                    errorMessage += 'üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n' +
                                  '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.';
                } else {
                    errorMessage += body.img_message || body.img_message_2 || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                }

                try {
                    await broadcastService.sendMessageWithImage(
                        user.user_id,
                        PATHS.ASSETS.PAYMENT,
                        errorMessage,
                        getMainKeyboard()
                    );
                    await db.updateUserCredits(user.user_id, 1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
                    await db.setUserPendingTask(user.user_id, null);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ webhook:', error);
                }
            }
            return res.json({ success: true });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (body.result || files.length > 0) {
            const user = await db.getUserByPendingTask(body.id_gen);
            if (user) {
                let imageBuffer: Buffer | undefined;
                if (body.result) {
                    imageBuffer = Buffer.from(body.result, 'base64');
                } else if (files.length > 0) {
                    imageBuffer = files[0].buffer;
                }

                if (imageBuffer) {
                    await bot.telegram.sendPhoto(user.user_id, { source: imageBuffer });
                    await broadcastService.sendMessageWithImage(
                        user.user_id,
                        PATHS.ASSETS.PAYMENT_PROCESS,
                        '‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                        getMainKeyboard()
                    );
                }

                await db.setUserPendingTask(user.user_id, null);
            }
        }

        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
}

export async function handleRukassaWebhook(req: Request, res: Response): Promise<void> {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Rukassa:', req.body);
        await paymentService.handleWebhook(req.body);
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook Rukassa:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
}

export function handleHealth(req: Request, res: Response): void {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        scheduledBroadcasts: broadcastService.getScheduledBroadcastsCount()
    });
}

export function handlePaymentSuccess(req: Request, res: Response): void {
    res.send(`
        <html>
            <head>
                <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
            </head>
            <body style="display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; font-family: Arial, sans-serif;">
                <div style="text-align: center; padding: 20px;">
                    <h1 style="color: #4CAF50;">‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h1>
                    <p>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.</p>
                </div>
            </body>
        </html>
    `);
}

export function handlePaymentFail(req: Request, res: Response): void {
    res.send(`
        <html>
            <head>
                <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
            </head>
            <body style="display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; font-family: Arial, sans-serif;">
                <div style="text-align: center; padding: 20px;">
                    <h1 style="color: #f44336;">‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</h1>
                    <p>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram –±–æ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
                </div>
            </body>
        </html>
    `);
}