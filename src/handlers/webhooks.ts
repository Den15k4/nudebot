import { Request, Response } from 'express';
import crypto from 'crypto';
import { logger } from '../index';
import { db } from '../services/database';
import { paymentService } from '../services/payment';
import { bot } from '../index';
import { ENV } from '../config/environment';

interface RukassaWebhookBody {
    shop_id: string;
    amount: string;
    order_id: string;
    payment_status: string;
    payment_method: string;
    custom_fields: string;
    merchant_order_id: string;
    sign: string;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Rukassa
function verifyRukassaSignature(data: RukassaWebhookBody): boolean {
    const signatureData = `${data.shop_id}:${data.amount}:${data.order_id}:${ENV.RUKASSA_TOKEN}`;
    const calculatedSignature = crypto
        .createHash('md5')
        .update(signatureData)
        .digest('hex');
    
    return calculatedSignature === data.sign;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Clothoff API
export async function handleClothoffWebhook(req: Request, res: Response) {
    try {
        logger.info('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Clothoff:', {
            body: req.body,
            files: req.files
        });

        const body = req.body;
        const files = req.files as Express.Multer.File[] || [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id_gen
        if (!body.id_gen) {
            logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id_gen –≤ –∑–∞–ø—Ä–æ—Å–µ');
            return res.status(400).json({ error: 'Missing id_gen' });
        }

        const user = await db.getUserByPendingTask(body.id_gen);
        if (!user) {
            logger.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', body.id_gen);
            return res.status(404).json({ error: 'User not found' });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (body.status === '500' || body.img_message || body.img_message_2) {
            let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n';
            let isAgeRestriction = false;

            if (body.img_message?.toLowerCase().includes('age is too young') || 
                body.img_message_2?.toLowerCase().includes('age is too young')) {
                errorMessage = 'üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n' +
                             '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.';
                isAgeRestriction = true;
            } else {
                errorMessage += body.img_message || body.img_message_2 || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            }

            try {
                await Promise.all([
                    bot.telegram.sendMessage(user.user_id, errorMessage),
                    db.updateUserCredits(user.user_id, 1), // –í–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–∞
                    db.setUserPendingTask(user.user_id, null),
                    db.updatePhotoProcessingStats(user.user_id, false, errorMessage)
                ]);

                logger.info('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
                    userId: user.user_id,
                    isAgeRestriction,
                    errorMessage
                });
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏:', error);
            }

            return res.json({ success: true });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (body.result || files.length > 0) {
            try {
                let imageBuffer: Buffer | undefined;
                
                if (body.result) {
                    imageBuffer = Buffer.from(body.result, 'base64');
                } else if (files.length > 0) {
                    imageBuffer = files[0].buffer;
                }

                if (imageBuffer) {
                    await Promise.all([
                        bot.telegram.sendPhoto(
                            user.user_id,
                            { source: imageBuffer },
                            { 
                                caption: '‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'action_process_photo' }],
                                        [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'action_back' }]
                                    ]
                                }
                            }
                        ),
                        db.updatePhotoProcessingStats(user.user_id, true),
                        db.setUserPendingTask(user.user_id, null)
                    ]);

                    logger.info('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', {
                        userId: user.user_id,
                        taskId: body.id_gen
                    });
                } else {
                    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ');
                }
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
                throw error;
            }
        }

        return res.json({ success: true });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Rukassa
export async function handleRukassaWebhook(req: Request, res: Response) {
    try {
        const webhookData = req.body as RukassaWebhookBody;
        
        logger.info('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Rukassa:', webhookData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        if (!verifyRukassaSignature(webhookData)) {
            logger.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook:', webhookData);
            return res.status(400).json({ error: 'Invalid signature' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if (!webhookData.merchant_order_id || !webhookData.payment_status) {
            logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ webhook:', webhookData);
            return res.status(400).json({ error: 'Missing required fields' });
        }

        try {
            await paymentService.handleWebhook(webhookData);
            logger.info('Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
                orderId: webhookData.merchant_order_id,
                status: webhookData.payment_status
            });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
            throw error;
        }

        return res.json({ success: true });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook Rukassa:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
export async function handleHealth(_req: Request, res: Response) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.pool.query('SELECT 1');
        
        return res.json({
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ health check:', error);
        return res.status(500).json({ 
            status: 'error',
            timestamp: new Date().toISOString(),
            error: 'Database connection failed'
        });
    }
}