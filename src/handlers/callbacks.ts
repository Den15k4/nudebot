import { Context } from 'telegraf';
import { SupportedCurrency, DetailedStats } from '../types/interfaces';
import { paymentService } from '../services/payment';
import { sendMessageWithImage } from '../utils/messages';
import { PATHS } from '../config/environment';
import { 
    getMainKeyboard, 
    getInitialKeyboard, 
    getAdminKeyboard,
    getAdminStatsKeyboard,
    getSpecialOffersKeyboard,
    getAdminBackupsKeyboard,
    getAdminBroadcastKeyboard
} from '../utils/keyboard';
import { db } from '../services/database';
import { MESSAGES } from '../utils/messages';
import { isAdmin } from '../middlewares/auth';
import * as adminHandlers from './admin';
import { StatsExporter } from '../services/stats';
import { ChartGenerator } from '../services/stats';
import { backupService, BackupService } from '../services/backup';

export async function handleCallbacks(ctx: Context): Promise<void> {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
        return;
    }

    const action = ctx.callbackQuery.data;
    const userId = ctx.from?.id;

    if (!userId) return;

    try {
        await ctx.answerCbQuery();

        // –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        if (action.startsWith('admin_') && await isAdmin(userId.toString())) {
            await handleAdminCallbacks(ctx, action);
            return;
        }

        switch (action) {
            case 'action_process_photo':
                const userCredits = await db.checkCredits(userId);
                if (userCredits <= 0) {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.PAYMENT,
                        '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.\n' +
                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤.',
                        getMainKeyboard()
                    );
                } else {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.PAYMENT_PROCESS,
                        'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n' +
                        '‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n' +
                        '- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n' +
                        '- –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n' +
                        '- –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ\n\n' +
                        `üí≥ –£ –≤–∞—Å ${userCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
                                ]
                            }
                        }
                    );
                }
                break;

            case 'action_buy':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.PAYMENT,
                    'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üí≥ Visa/MC (RUB)', callback_data: 'currency_RUB' }],
                                [{ text: 'üí≥ Visa/MC (KZT)', callback_data: 'currency_KZT' }],
                                [{ text: 'üí≥ Visa/MC (UZS)', callback_data: 'currency_UZS' }],
                                [{ text: 'üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: 'currency_CRYPTO' }],
                                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
                            ]
                        }
                    }
                );
                break;

            case 'action_balance':
                const credits = await db.checkCredits(userId);
                const stats = await db.getUserPhotoStats(userId);
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.BALANCE,
                    `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n` +
                    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                    `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ: ${stats.photos_processed}\n` +
                    `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${stats.successful_photos}\n` +
                    `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.failed_photos}\n` +
                    `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.round(stats.avg_processing_time || 0)}—Å`,
                    getMainKeyboard()
                );
                break;

            case 'action_referrals':
                const referralStats = await db.getReferralStats(userId);
                const transactions = await db.getRecentReferralTransactions(userId);
                
                let message = 'üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n' +
                    `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.count}\n` +
                    `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralStats.earnings}‚ÇΩ\n\n` +
                    'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
                    `https://t.me/${ctx.botInfo?.username}?start=${userId}`;

                if (transactions.length > 0) {
                    message += '\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:\n';
                    transactions.forEach((t: { 
                        username: string;
                        amount: number;
                        created_at: Date;
                        referrer_id: number;
                        referral_id: number;
                    }) => {
                        message += `${t.username}: ${t.amount}‚ÇΩ (${new Date(t.created_at).toLocaleDateString()})\n`;
                    });
                }

                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.REFERRAL,
                    message,
                    getMainKeyboard()
                );
                break;

            case 'action_info':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    '‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n' +
                    'ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n' +
                    'üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
                    '1. –ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã\n' +
                    '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n' +
                    '3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n' +
                    '‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n' +
                    '- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n' +
                    '- –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n' +
                    '- –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ',
                    getMainKeyboard()
                );
                break;

            case 'action_help':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    MESSAGES.HELP,
                    getMainKeyboard()
                );
                break;

            case 'action_back':
                const accepted = await db.hasAcceptedRules(userId);
                if (!accepted) {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.WELCOME,
                        MESSAGES.WELCOME(false),
                        getInitialKeyboard()
                    );
                } else {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.WELCOME,
                        MESSAGES.WELCOME(true),
                        getMainKeyboard()
                    );
                }
                break;

            case 'action_rules':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    MESSAGES.RULES,
                    getInitialKeyboard()
                );
                break;

                case 'action_accept_rules':
                if (!ctx.from?.id) return;
    
                try {
                    await db.updateAcceptedRules(ctx.from.id);
        
                // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await sendMessageWithImage(
                ctx,
                PATHS.ASSETS.WELCOME,
            '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∞–≤–∏–ª!\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
            '‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n' +
            '‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n' +
            '‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
            getMainKeyboard()
        );
    } catch (error) {
        console.error('Error in rules acceptance:', error);
        await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start',
            getInitialKeyboard()
        );
    }
    break;

            default:
                if (action.startsWith('currency_')) {
                    const currency = action.split('_')[1] as SupportedCurrency;
                    await handleCurrencySelection(ctx, userId, currency);
                } else if (action.startsWith('buy_')) {
                    const [_, packageId, currency] = action.split('_');
                    await handlePackageSelection(
                        ctx,
                        userId,
                        parseInt(packageId),
                        currency as SupportedCurrency
                    );
                } else {
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
                }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function handleCurrencySelection(ctx: Context, userId: number, currency: SupportedCurrency): Promise<boolean> {
    try {
        const packages = paymentService.getAvailablePackages(currency);
        if (packages.length === 0) return false;

        const activeOffers = await db.getActiveSpecialOffers();
        let offerMessage = '';
        
        if (activeOffers.length > 0) {
            offerMessage = '\n\nüéâ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:\n';
            activeOffers.forEach(offer => {
                offerMessage += `‚Ä¢ ${offer.title}: -${offer.discountPercent}%\n`;
            });
        }

        const buttons = packages.map(pkg => {
            let price = pkg.prices[currency];
            let description = pkg.description;
            
            const applicableOffer = activeOffers.find(o => 
                (!o.minCredits || pkg.credits >= o.minCredits)
            );
            
            if (applicableOffer) {
                const discount = applicableOffer.discountPercent / 100;
                price = price * (1 - discount);
                description += ` (${applicableOffer.discountPercent}% OFF)`;
            }

            return [{
                text: `${description} - ${price} ${currency}`,
                callback_data: `buy_${pkg.id}_${currency}`
            }];
        });
        
        buttons.push([{
            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            callback_data: 'action_back'
        }]);

        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.PAYMENT,
            `üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Ü–µ–Ω—ã –≤ ${currency}):${offerMessage}`,
            { 
                reply_markup: {
                    inline_keyboard: buttons
                }
            }
        );
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã:', error);
        return false;
    }
}

async function handlePackageSelection(ctx: Context, userId: number, packageId: number, currency: SupportedCurrency): Promise<void> {
    try {
        const paymentUrl = await paymentService.createPayment(userId, packageId, currency);
        const package_ = paymentService.getAvailablePackages(currency).find(p => p.id === packageId);

        const activeOffers = await db.getActiveSpecialOffers();
        const applicableOffer = activeOffers.find(o => 
            (!o.minCredits || package_!.credits >= o.minCredits)
        );

        let priceInfo = '';
        if (applicableOffer && package_) {
            const originalPrice = package_.prices[currency];
            const discountedPrice = originalPrice * (1 - applicableOffer.discountPercent / 100);
            priceInfo = `\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${originalPrice} ${currency}\n` +
                       `–°–∫–∏–¥–∫–∞: ${applicableOffer.discountPercent}%\n` +
                       `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${discountedPrice} ${currency}`;
        }

        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.PAYMENT_PROCESS,
            `üîÑ –î–ª—è –æ–ø–ª–∞—Ç—ã ${package_?.description} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.${priceInfo}\n\n` +
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.' +
            (applicableOffer?.extraCredits ? `\n\nüéÅ –ë–æ–Ω—É—Å: +${applicableOffer.extraCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤` : ''),
            {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                            url: paymentUrl
                        }],
                        [{
                            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞',
                            callback_data: `currency_${currency}`
                        }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
async function handleAdminCallbacks(ctx: Context, action: string): Promise<void> {
    try {
        switch (action) {
            case 'admin_stats':
                await adminHandlers.handleStats(ctx);
                break;

            case 'admin_detailed_stats':
                const stats = await db.getDetailedStats();
                await ctx.reply(
                    formatDetailedStats(stats),
                    getAdminStatsKeyboard()
                );
                break;

            case 'admin_stats_graphs':
                await handleStatsGraphs(ctx);
                break;

            case 'admin_export_stats':
                await ctx.reply(
                    'üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üìä Excel', callback_data: 'admin_export_excel' },
                                    { text: 'üìù CSV', callback_data: 'admin_export_csv' }
                                ],
                                [
                                    { text: 'üìã JSON', callback_data: 'admin_export_json' },
                                    { text: 'üìÑ PDF', callback_data: 'admin_export_pdf' }
                                ],
                                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
                            ]
                        }
                    }
                );
                break;

            case 'admin_export_excel':
            case 'admin_export_csv':
            case 'admin_export_json':
            case 'admin_export_pdf':
                await handleStatsExport(ctx, action.split('_')[2]);
                break;

            case 'admin_special_offers':
                await adminHandlers.handleSpecialOffers(ctx);
                break;

            case 'admin_create_offer':
                await adminHandlers.handleCreateSpecialOffer(ctx);
                break;

            case 'admin_backups':
                await adminHandlers.handleBackups(ctx);
                break;

            case 'admin_create_backup':
                await adminHandlers.handleCreateBackup(ctx);
                break;

            case 'admin_broadcast':
                await ctx.reply(
                    'üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:',
                    getAdminBroadcastKeyboard()
                );
                break;

            case 'admin_broadcast_all':
                await adminHandlers.handleBroadcastCommand(ctx);
                break;

            case 'admin_stats_refresh':
                await adminHandlers.handleStats(ctx);
                break;

            case 'admin_back':
                await ctx.reply(
                    'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                    getAdminKeyboard()
                );
                break;

            default:
                if (action.startsWith('admin_deactivate_offer_')) {
                    const offerId = parseInt(action.split('_')[3]);
                    await handleOfferDeactivation(ctx, offerId);
                } 
                else if (action.startsWith('admin_restore_backup_')) {
                    const backupId = parseInt(action.split('_')[3]);
                    await handleBackupRestore(ctx, backupId);
                }
                else if (action.startsWith('admin_edit_offer_')) {
                    const offerId = parseInt(action.split('_')[3]);
                    await handleOfferEdit(ctx, offerId);
                }
                else {
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–µ:', action);
                }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-callback:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è');
    }
}

async function handleStatsGraphs(ctx: Context): Promise<void> {
    try {
        const chartGenerator = new ChartGenerator();
        const charts = await chartGenerator.generateDashboard();
        await ctx.replyWithPhoto({ source: charts });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤');
    }
}

async function handleStatsExport(ctx: Context, format: string): Promise<void> {
    try {
        const exporter = new StatsExporter();
        const file = await exporter.exportStats(format);
        await ctx.replyWithDocument({ 
            source: file, 
            filename: `stats_${new Date().toISOString()}.${format}` 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

async function handleOfferDeactivation(ctx: Context, offerId: number): Promise<void> {
    try {
        await db.deactivateSpecialOffer(offerId);
        await ctx.reply('‚úÖ –ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        await adminHandlers.handleSpecialOffers(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏');
    }
}

// –í callbacks.ts –∑–∞–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é handleBackupRestore –Ω–∞:
async function handleBackupRestore(ctx: Context, backupId: number): Promise<void> {
    try {
        const backups = await db.getBackupHistory();
        const backup = backups.find(b => b.id === backupId);
        if (backup) {
            await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...');
            try {
                await backupService.restoreFromBackup(backup.filename);
                await ctx.reply('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            } catch (restoreError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', restoreError);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞');
            }
        } else {
            await ctx.reply('‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –±—ç–∫–∞–ø–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }
}

async function handleOfferEdit(ctx: Context, offerId: number): Promise<void> {
    try {
        const offer = await db.getOfferById(offerId);
        if (!offer) {
            await ctx.reply('‚ùå –ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        await ctx.reply(
            'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏\n\n' +
            '–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n' +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description}\n` +
            `–°–∫–∏–¥–∫–∞: ${offer.discountPercent}%\n` +
            `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(offer.endDate).toLocaleDateString()}\n\n` +
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
            '–ù–∞–∑–≤–∞–Ω–∏–µ\n' +
            '–û–ø–∏—Å–∞–Ω–∏–µ\n' +
            '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏\n' +
            '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (DD.MM.YYYY)',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_special_offers' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏');
    }
}

function formatDetailedStats(stats: DetailedStats): string {
    return 'üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n' +
        'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n' +
        `‚Ä¢ –í—Å–µ–≥–æ: ${stats.users.total_users}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.users.active_today}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${stats.users.total_credits}\n` +
        `‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.users.total_revenue}‚ÇΩ\n\n` +
        'üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–∑–∞ 24—á):\n' +
        `‚Ä¢ –í—Å–µ–≥–æ: ${stats.photos.total_processed}\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.photos.successful}\n` +
        `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.photos.failed}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(stats.photos.avg_processing_time || 0)}—Å\n\n` +
        'üí∞ –ü–ª–∞—Ç–µ–∂–∏ (–∑–∞ 24—á):\n' +
        `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.payments.total_payments}\n` +
        `‚Ä¢ –°—É–º–º–∞: ${stats.payments.total_amount || 0}‚ÇΩ\n` +
        `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.payments.unique_users}\n\n` +
        'üéâ –ê–∫—Ü–∏–∏:\n' +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π: ${stats.offers.active_offers}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: ${Math.round(stats.offers.avg_discount || 0)}%`;
}