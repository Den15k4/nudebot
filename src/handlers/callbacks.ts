import { Context } from 'telegraf';
import { db } from '../services/database';
import { sendMessageWithImage } from '../utils/messages';
import { getMainKeyboard, getInitialKeyboard, getPaymentKeyboard } from '../utils/keyboard';
import { MESSAGES } from '../utils/messages';
import { PATHS } from '../config/environment';
import { isAdmin } from '../middlewares/auth';
import * as commandHandlers from './commands';
import * as adminHandlers from './admin';
import { paymentService } from '../services/payment';

export async function handleCallbacks(ctx: Context) {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
        return;
    }

    const action = ctx.callbackQuery.data;
    const userId = ctx.from?.id;

    if (!userId) return;

    try {
        await ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏

        switch (action) {
            case 'action_buy':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.PAYMENT,
                    'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                    getPaymentKeyboard()
                );
                break;

            case 'action_balance':
                const credits = await db.checkCredits(userId);
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.BALANCE,
                    `üí≥ –£ –≤–∞—Å ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤`,
                    getMainKeyboard()
                );
                break;

            case 'action_info':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    '‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n' +
                    'ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n' +
                    'üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
                    '1. –ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã\n' +
                    '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n' +
                    '3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n' +
                    '‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n' +
                    '- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n' +
                    '- –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n' +
                    '- –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ',
                    getMainKeyboard()
                );
                break;

            case 'action_help':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    MESSAGES.HELP,
                    getMainKeyboard()
                );
                break;

            case 'action_back':
                const accepted = await db.hasAcceptedRules(userId);
                if (!accepted) {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.WELCOME,
                        MESSAGES.WELCOME(false),
                        getInitialKeyboard()
                    );
                } else {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.WELCOME,
                        MESSAGES.WELCOME(true),
                        getMainKeyboard()
                    );
                }
                break;

            case 'action_rules':
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    MESSAGES.RULES,
                    getInitialKeyboard()
                );
                break;

            case 'action_accept_rules':
                await db.updateUserCredits(userId, 0);
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.WELCOME,
                    MESSAGES.RULES_ACCEPTED,
                    getMainKeyboard()
                );
                break;

            // –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            case 'admin_broadcast':
                if (await isAdmin(userId.toString())) {
                    await adminHandlers.handleBroadcastCommand(ctx);
                }
                break;

            case 'admin_schedule':
                if (await isAdmin(userId.toString())) {
                    await adminHandlers.handleScheduleCommand(ctx);
                }
                break;

            case 'admin_stats':
                if (await isAdmin(userId.toString())) {
                    await adminHandlers.handleStats(ctx);
                }
                break;

            case 'admin_cancel_broadcast':
                if (await isAdmin(userId.toString())) {
                    await adminHandlers.handleCancelBroadcast(ctx);
                }
                break;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç –∏ –ø–ª–∞—Ç–µ–∂–µ–π
            case action.match(/^currency_(.+)/)?.input:
                const currency = action.split('_')[1];
                if (!await handleCurrencySelection(ctx, userId, currency)) {
                    await sendMessageWithImage(
                        ctx,
                        PATHS.ASSETS.PAYMENT,
                        '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞',
                        getPaymentKeyboard()
                    );
                }
                break;

            case action.match(/^buy_(\d+)_(.+)/)?.input:
                const [_, packageId, curr] = action.split('_');
                await handlePackageSelection(ctx, userId, parseInt(packageId), curr);
                break;

            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleCurrencySelection(ctx: Context, userId: number, currency: string): Promise<boolean> {
    try {
        const packages = paymentService.getAvailablePackages(currency as any);
        if (packages.length === 0) return false;

        const buttons = packages.map(pkg => ([
            Markup.button.callback(
                `${pkg.description} - ${pkg.prices[currency as any]} ${currency}`,
                `buy_${pkg.id}_${currency}`
            )
        ]));
        buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'action_back')]);

        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.PAYMENT,
            `üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Ü–µ–Ω—ã –≤ ${currency}):`,
            { reply_markup: Markup.inlineKeyboard(buttons) }
        );
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã:', error);
        return false;
    }
}

async function handlePackageSelection(ctx: Context, userId: number, packageId: number, currency: string) {
    try {
        const paymentUrl = await paymentService.createPayment(userId, packageId, currency as any);
        const package_ = paymentService.getAvailablePackages(currency as any).find(p => p.id === packageId);

        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.PAYMENT_PROCESS,
            `üîÑ –î–ª—è –æ–ø–ª–∞—Ç—ã ${package_?.description} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n` +
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.',
            {
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.url('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', paymentUrl)],
                    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞', `currency_${currency}`)]
                ])
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}