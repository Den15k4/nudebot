import { Context } from 'telegraf';
import { SupportedCurrency } from '../types/interfaces';
import { paymentService } from '../services/payment';
import { sendMessage } from '../utils/messages';
import { 
    getMainKeyboard, 
    getInitialKeyboard, 
    getAdminKeyboard,
    getPaymentKeyboard
} from '../utils/keyboard';
import { db } from '../services/database';
import { MESSAGES } from '../utils/messages';
import { isAdmin } from '../middlewares/auth';

async function handleAdminCallbacks(ctx: Context, action: string): Promise<void> {
    try {
        if (action === 'admin_stats') {
            const stats = await db.getAdminStats();
            await sendMessage(
                ctx,
                `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n` +
                `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n` +
                `‚Ä¢ –í—Å–µ–≥–æ: ${stats.users.total}\n` +
                `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.users.active_24h}\n` +
                `‚Ä¢ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: ${stats.users.paid}\n\n` +
                `üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:\n` +
                `‚Ä¢ –í—Å–µ–≥–æ: ${stats.photos.total_processed}\n` +
                `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.photos.successful}\n` +
                `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.photos.failed}\n\n` +
                `üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n` +
                `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.payments.total_amount}‚ÇΩ`,
                getAdminKeyboard()
            );
        } else if (action === 'admin_back') {
            await sendMessage(
                ctx,
                'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                getAdminKeyboard()
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-callback:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è');
    }
}

async function handleCurrencySelection(ctx: Context, userId: number, currency: SupportedCurrency): Promise<boolean> {
    try {
        const packages = paymentService.getAvailablePackages(currency);
        if (packages.length === 0) return false;

        const buttons = packages.map(pkg => [{
            text: `${pkg.description} - ${pkg.prices[currency]} ${currency}`,
            callback_data: `buy_${pkg.id}_${currency}`
        }]);
        
        buttons.push([{
            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            callback_data: 'action_back'
        }]);

        await sendMessage(
            ctx,
            `üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Ü–µ–Ω—ã –≤ ${currency}):`,
            { 
                reply_markup: {
                    inline_keyboard: buttons
                }
            }
        );
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã:', error);
        return false;
    }
}

async function handlePackageSelection(ctx: Context, userId: number, packageId: number, currency: SupportedCurrency): Promise<void> {
    try {
        const paymentUrl = await paymentService.createPayment(userId, packageId, currency);
        const package_ = paymentService.getAvailablePackages(currency).find(p => p.id === packageId);

        await sendMessage(
            ctx,
            `üîÑ –î–ª—è –æ–ø–ª–∞—Ç—ã ${package_?.description} (${package_?.prices[currency]} ${currency}) –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n` +
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                            url: paymentUrl
                        }],
                        [{
                            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞',
                            callback_data: `currency_${currency}`
                        }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        await ctx.reply(`‚ùå ${error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}`);
    }
}

export async function handleCallbacks(ctx: Context): Promise<void> {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
        return;
    }

    const action = ctx.callbackQuery.data;
    const userId = ctx.from?.id;

    if (!userId) return;

    try {
        await ctx.answerCbQuery();

        if (action.startsWith('admin_') && await isAdmin(userId.toString())) {
            await handleAdminCallbacks(ctx, action);
            return;
        }

        switch (action) {
            case 'action_process_photo': {
                const userCredits = await db.checkCredits(userId);
                if (userCredits <= 0) {
                    await sendMessage(
                        ctx,
                        MESSAGES.ERRORS.INSUFFICIENT_CREDITS,
                        getMainKeyboard()
                    );
                } else {
                    await sendMessage(
                        ctx,
                        'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n' +
                        '‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n' +
                        '- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n' +
                        '- –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n' +
                        '- –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ\n\n' +
                        `üí≥ –£ –≤–∞—Å ${userCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
                                ]
                            }
                        }
                    );
                }
                break;
            }

            case 'action_buy': {
                const keyboard = getPaymentKeyboard();
                await sendMessage(
                    ctx,
                    'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                    keyboard
                );
                break;
            }

            case 'action_balance': {
                const credits = await db.checkCredits(userId);
                const stats = await db.getUserPhotoStats(userId);
                await sendMessage(
                    ctx,
                    `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n` +
                    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                    `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ: ${stats.total_processed}\n` +
                    `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${stats.successful_photos}\n` +
                    `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.failed_photos}`,
                    getMainKeyboard()
                );
                break;
            }

            case 'action_referrals': {
                const referralStats = await db.getReferralStats(userId);
                await sendMessage(
                    ctx,
                    MESSAGES.REFERRAL.STATS(referralStats.count, referralStats.earnings),
                    getMainKeyboard()
                );
                break;
            }

            case 'action_help': {
                await sendMessage(
                    ctx,
                    MESSAGES.HELP,
                    getMainKeyboard()
                );
                break;
            }

            case 'action_back': {
                const accepted = await db.hasAcceptedRules(userId);
                await sendMessage(
                    ctx,
                    MESSAGES.WELCOME(accepted),
                    accepted ? getMainKeyboard() : getInitialKeyboard()
                );
                break;
            }

            case 'action_rules': {
                await sendMessage(
                    ctx,
                    MESSAGES.RULES,
                    getInitialKeyboard()
                );
                break;
            }

            case 'action_accept_rules': {
                try {
                    await db.hasAcceptedRules(userId);
                    await sendMessage(
                        ctx,
                        MESSAGES.RULES_ACCEPTED,
                        getMainKeyboard()
                    );
                } catch (error) {
                    console.error('Error in rules acceptance:', error);
                    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
                }
                break;
            }

            default: {
                if (action.startsWith('currency_')) {
                    const currency = action.split('_')[1] as SupportedCurrency;
                    await handleCurrencySelection(ctx, userId, currency);
                } else if (action.startsWith('buy_')) {
                    const [_, packageId, currency] = action.split('_');
                    await handlePackageSelection(
                        ctx,
                        userId,
                        parseInt(packageId),
                        currency as SupportedCurrency
                    );
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}