import { Context } from 'telegraf';
import { db } from '../services/database';
import { sendMessageWithImage } from '../utils/messages';
import { getMainKeyboard, getInitialKeyboard, getPaymentKeyboard } from '../utils/keyboard';
import { MESSAGES } from '../utils/messages';
import { PATHS } from '../config/environment';

export async function handleReferrals(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;

        const userId = ctx.from.id;
        const stats = await db.getReferralStats(userId);
        const transactions = await db.getRecentReferralTransactions(userId);
        
        let message = 'üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n' +
            `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.count}\n` +
            `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.earnings}‚ÇΩ\n\n` +
            'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
            `https://t.me/${ctx.botInfo?.username}?start=${userId}`;

        if (transactions.length > 0) {
            message += '\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:\n';
            transactions.forEach(t => {
                message += `${t.username}: ${t.amount}‚ÇΩ (${new Date(t.created_at).toLocaleDateString()})\n`;
            });
        }

        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.REFERRAL,
            message,
            getMainKeyboard()
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleStart(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;

        const userId = ctx.from.id;
        const username = ctx.from.username;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        const startPayload = (ctx.message && 'text' in ctx.message) ? 
            ctx.message.text.split(' ')[1] : null;

        await db.addUser(userId, username);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if (startPayload) {
            const referrerId = parseInt(startPayload);
            if (!isNaN(referrerId) && referrerId !== userId) {
                await db.addReferral(userId, referrerId);
                await sendMessageWithImage(
                    ctx,
                    PATHS.ASSETS.REFERRAL,
                    'üéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n' +
                    '–í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—É—á–∏—Ç 50% –æ—Ç –≤–∞—à–∏—Ö –æ–ø–ª–∞—Ç.',
                    getInitialKeyboard()
                );
                return;
            }
        }
        
        const accepted = await db.hasAcceptedRules(userId);
        if (!accepted) {
            await sendMessageWithImage(
                ctx,
                PATHS.ASSETS.WELCOME,
                MESSAGES.WELCOME(false),
                getInitialKeyboard()
            );
        } else {
            await sendMessageWithImage(
                ctx,
                PATHS.ASSETS.WELCOME,
                MESSAGES.WELCOME(true),
                getMainKeyboard()
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleCredits(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;
        
        const credits = await db.checkCredits(ctx.from.id);
        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.BALANCE,
            `üí≥ –£ –≤–∞—Å ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤`,
            getMainKeyboard()
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleBuy(ctx: Context): Promise<void> {
    await sendMessageWithImage(
        ctx,
        PATHS.ASSETS.PAYMENT,
        'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        getPaymentKeyboard()
    );
}

export async function handleHelp(ctx: Context): Promise<void> {
    await sendMessageWithImage(
        ctx,
        PATHS.ASSETS.WELCOME,
        MESSAGES.HELP,
        getMainKeyboard()
    );
}

export async function handleRules(ctx: Context): Promise<void> {
    await sendMessageWithImage(
        ctx,
        PATHS.ASSETS.WELCOME,
        MESSAGES.RULES,
        getInitialKeyboard()
    );
}

export async function handleAcceptRules(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;

        await db.updateUserCredits(ctx.from.id, 0); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª
        await sendMessageWithImage(
            ctx,
            PATHS.ASSETS.WELCOME,
            MESSAGES.RULES_ACCEPTED,
            getMainKeyboard()
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleBack(ctx: Context): Promise<void> {
    try {
        if (!ctx.from) return;

        const accepted = await db.hasAcceptedRules(ctx.from.id);
        if (!accepted) {
            await sendMessageWithImage(
                ctx,
                PATHS.ASSETS.WELCOME,
                MESSAGES.WELCOME(false),
                getInitialKeyboard()
            );
        } else {
            await sendMessageWithImage(
                ctx,
                PATHS.ASSETS.WELCOME,
                MESSAGES.WELCOME(true),
                getMainKeyboard()
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}