import { Telegraf, Context } from 'telegraf';

export class ChannelRequestsHandler {
    private bot: Telegraf;
    private channelId: string;

    constructor(bot: Telegraf, channelId: string) {
        this.bot = bot;
        this.channelId = channelId;
    }

    public setupHandlers(): void {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        this.bot.on('chat_join_request', async (ctx) => {
            try {
                const request = ctx.chatJoinRequest;
                console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª:', {
                    userId: request.from.id,
                    channelId: request.chat.id,
                    timestamp: new Date().toISOString()
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–Ω–æ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª
                if (request.chat.id.toString() !== this.channelId) {
                    return;
                }

                // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
                await this.bot.telegram.approveChatJoinRequest(
                    request.chat.id,
                    request.from.id
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await this.bot.telegram.sendMessage(
                    request.from.id,
                    `üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª!\n\n` +
                    `ü§ñ –ü–æ–∫–∞ –≤—ã –∂–¥–µ—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n` +
                    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'start' }]
                            ]
                        }
                    }
                );

                console.log('–ó–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', {
                    userId: request.from.id,
                    channelId: request.chat.id,
                    status: 'approved',
                    timestamp: new Date().toISOString()
                });

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error);
                
                if (ctx.chatJoinRequest?.from.id) {
                    try {
                        await this.bot.telegram.sendMessage(
                            ctx.chatJoinRequest.from.id,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
                        );
                    } catch (sendError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
                    }
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
        this.bot.action('start', async (ctx) => {
            try {
                await ctx.editMessageText(
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
                    '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–¥–µ—Ç—å –ª—é–±—É—é –¥–∞–º—É!.\n' +
                    '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã.\n\n' +
                    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üí´ –†–∞–∑–¥–µ—Ç—å –ø–æ–¥—Ä—É–≥—É', callback_data: 'start_processing' },
                                    { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }
                                ],
                                [
                                    { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'check_balance' },
                                    { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral_program' }
                                ]
                            ]
                        }
                    }
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ start:', error);
                await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start');
            }
        });
    }
}