import { Markup } from 'telegraf';
import { 
    CustomInlineKeyboardButton, 
    KeyboardOptions 
} from '../types/interfaces';
import { MENU_ACTIONS } from '../config/constants';
import { logger } from '../utils/logger';

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function createKeyboard(buttons: CustomInlineKeyboardButton[][], options: KeyboardOptions = {}) {
    try {
        return {
            reply_markup: {
                inline_keyboard: buttons.filter(row => row.length > 0)
            }
        };
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
        return {
            reply_markup: {
                inline_keyboard: [[{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'action_back' }]]
            }
        };
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
export function getMainKeyboard(options: KeyboardOptions = {}) {
    try {
        const { disabledButtons = [] } = options;
        const buttons: CustomInlineKeyboardButton[][] = [];

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        const firstRow: CustomInlineKeyboardButton[] = [];
        if (!disabledButtons.includes('process_photo')) {
            firstRow.push({ text: 'üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ', callback_data: 'action_process_photo' });
        }
        if (!disabledButtons.includes('buy')) {
            firstRow.push({ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'action_buy' });
        }
        if (firstRow.length > 0) buttons.push(firstRow);

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        const secondRow: CustomInlineKeyboardButton[] = [];
        if (!disabledButtons.includes('balance')) {
            secondRow.push({ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'action_balance' });
        }
        if (!disabledButtons.includes('referrals')) {
            secondRow.push({ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'action_referrals' });
        }
        if (secondRow.length > 0) buttons.push(secondRow);

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
        if (!disabledButtons.includes('help')) {
            buttons.push([{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'action_help' }]);
        }

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getMainKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function getInitialKeyboard(options: KeyboardOptions = {}) {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', callback_data: 'action_rules' }],
            [{ text: '‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', callback_data: 'action_accept_rules' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'action_help' }]
        ];

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getInitialKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
export function getAdminKeyboard(options: KeyboardOptions = {}) {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
            [{ text: 'üì® –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' }],
            [{ text: 'üí∞ –í—ã–≤–æ–¥—ã', callback_data: 'admin_withdrawals' }]
        ];

        if (!options.hideBackButton) {
            buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]);
        }

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getAdminKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
export function getPaymentKeyboard(options: KeyboardOptions = {}) {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [{ text: 'üí≥ Visa/MC/MIR', callback_data: 'currency_RUB' }],
            [{ text: 'üí≥ Visa/MC [KZT]', callback_data: 'currency_KZT' }],
            [{ text: 'üí≥ Visa/MC [UZS]', callback_data: 'currency_UZS' }],
            [{ text: 'üí∏ –°–ë–ü', callback_data: 'currency_RUB_SBP' }],
            [{ text: 'üíé Crypto', callback_data: 'currency_CRYPTO' }]
        ];

        if (!options.hideBackButton) {
            buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]);
        }

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getPaymentKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
export function getReferralKeyboard(userId: number) {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'referral_stats' },
                { text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫', callback_data: 'referral_earnings' }
            ],
            [{ 
                text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', 
                url: `https://t.me/${process.env.BOT_USERNAME}?start=${Buffer.from(userId.toString()).toString('base64')}` 
            }],
            [{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data: 'action_withdraw' }],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
        ];

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getReferralKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
export function getWithdrawKeyboard() {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [
                { text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'withdraw_card' },
                { text: 'üíé USDT (TRC20)', callback_data: 'withdraw_crypto' }
            ],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_referrals' }]
        ];

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getWithdrawKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
export function getPhotoProcessingKeyboard() {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data: 'action_cancel_processing' }],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
        ];

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getPhotoProcessingKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
export function getBalanceKeyboard() {
    try {
        const buttons: CustomInlineKeyboardButton[][] = [
            [
                { text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'action_buy' },
                { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'action_history' }
            ],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'action_back' }]
        ];

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getBalanceKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫
export function getErrorKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'action_back' }],
                [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'action_help' }]
            ]
        }
    };
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–∫–µ—Ç–æ–≤
export function getPackageKeyboard(
    packages: Array<{id: number, description: string, price: number}>, 
    currency: string
) {
    try {
        const buttons: CustomInlineKeyboardButton[][] = packages.map(pkg => ([{
            text: `${pkg.description} - ${pkg.price} ${currency}`,
            callback_data: `buy_${pkg.id}_${currency}`
        }]));

        buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]);

        return createKeyboard(buttons);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ getPackageKeyboard:', error);
        return getErrorKeyboard();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
export function disableButtons(
    keyboard: any, 
    buttonsToDisable: string[]
): { reply_markup: { inline_keyboard: CustomInlineKeyboardButton[][] } } {
    try {
        if (!keyboard.reply_markup?.inline_keyboard) return keyboard;

        const newKeyboard = JSON.parse(JSON.stringify(keyboard));
        newKeyboard.reply_markup.inline_keyboard = newKeyboard.reply_markup.inline_keyboard
            .map((row: CustomInlineKeyboardButton[]) =>
                row.map(button => {
                    if (buttonsToDisable.includes(button.callback_data || '')) {
                        return {
                            ...button,
                            callback_data: 'disabled',
                            text: `${button.text} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)`
                        };
                    }
                    return button;
                })
            )
            .filter((row: CustomInlineKeyboardButton[]) => row.length > 0);

        return newKeyboard;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ disableButtons:', error);
        return keyboard;
    }
}