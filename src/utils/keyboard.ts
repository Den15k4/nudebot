import { Markup } from 'telegraf';
import { MENU_ACTIONS, ADMIN_ACTIONS } from '../config/constants';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';

export function getMainKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üì∏ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ', callback_data: 'action_process_photo' },
                    { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'action_buy' }
                ],
                [
                    { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'action_balance' },
                    { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'action_referrals' }
                ],
                [
                    { text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'action_info' },
                    { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'action_help' }
                ],
                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'action_back' }]
            ]
        }
    };
}

export function getInitialKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', callback_data: 'action_rules' }],
                [{ text: '‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', callback_data: 'action_accept_rules' }],
                [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'action_help' }]
            ]
        }
    };
}

export function getAdminKeyboard() {
    return {
        reply_markup: Markup.inlineKeyboard([
            [
                Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'),
                Markup.button.callback('üïí –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'admin_schedule')
            ],
            [
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats'),
                Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'admin_cancel_broadcast')
            ],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'action_back')]
        ])
    };
}

export function getPaymentKeyboard() {
    return {
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ Visa/MC (RUB)', 'currency_RUB')],
            [Markup.button.callback('üí≥ Visa/MC (KZT)', 'currency_KZT')],
            [Markup.button.callback('üí≥ Visa/MC (UZS)', 'currency_UZS')],
            [Markup.button.callback('üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'currency_CRYPTO')],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'action_back')]
        ])
    };
}

export function getReferralKeyboard(userId: number) {
    return {
        reply_markup: Markup.inlineKeyboard([
            [
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats'),
                Markup.button.callback('üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫', 'referral_earnings')
            ],
            [Markup.button.url('üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `https://t.me/share/url?url=https://t.me/${process.env.BOT_USERNAME}?start=${userId}`)],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'action_back')]
        ])
    };
}

export function getBroadcastCancelKeyboard() {
    return {
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'admin_cancel_broadcast')],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'action_back')]
        ])
    };
}

export function getPhotoProcessingKeyboard() {
    return {
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', 'action_cancel_processing')],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'action_back')]
        ])
    };
}

export function getBalanceKeyboard() {
    return {
        reply_markup: Markup.inlineKeyboard([
            [
                Markup.button.callback('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'action_buy'),
                Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'action_history')
            ],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'action_back')]
        ])
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
export function getConfirmationKeyboard(action: string) {
    return {
        reply_markup: Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úÖ –î–∞', `confirm_${action}`),
                Markup.button.callback('‚ùå –ù–µ—Ç', 'action_back')
            ]
        ])
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export function getPaginationKeyboard(currentPage: number, totalPages: number, baseAction: string) {
    const buttons: InlineKeyboardButton[][] = [];
    
    const navigationRow: InlineKeyboardButton[] = [];
    if (currentPage > 1) {
        navigationRow.push(Markup.button.callback('‚¨ÖÔ∏è', `${baseAction}_page_${currentPage - 1}`));
    }
    navigationRow.push(Markup.button.callback(`${currentPage}/${totalPages}`, 'ignore'));
    if (currentPage < totalPages) {
        navigationRow.push(Markup.button.callback('‚û°Ô∏è', `${baseAction}_page_${currentPage + 1}`));
    }
    
    buttons.push(navigationRow);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'action_back')]);
    
    return {
        reply_markup: Markup.inlineKeyboard(buttons)
    };
}