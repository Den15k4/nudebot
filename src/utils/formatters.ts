import { SupportedCurrency } from '../types/interfaces';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
export const formatNumber = {
    // –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    default: (num: number): string => {
        return new Intl.NumberFormat('ru-RU').format(num);
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
    currency: (amount: number, currency: SupportedCurrency): string => {
        const formatter = new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: currency === 'CRYPTO' ? 'USD' : currency,
            minimumFractionDigits: currency === 'CRYPTO' ? 2 : 0,
            maximumFractionDigits: currency === 'CRYPTO' ? 2 : 0
        });

        let formatted = formatter.format(amount);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if (currency === 'CRYPTO') {
            formatted = `${formatted.replace('$', '')} USDT`;
        }

        return formatted;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    percent: (num: number): string => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'percent',
            minimumFractionDigits: 1,
            maximumFractionDigits: 1
        }).format(num / 100);
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    fileSize: (bytes: number): string => {
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = bytes;
        let unitIndex = 0;

        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }

        return `${size.toFixed(1)} ${units[unitIndex]}`;
    }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
export const formatDate = {
    // –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    full: (date: Date): string => {
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    },

    // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
    date: (date: Date): string => {
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    },

    // –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    time: (date: Date): string => {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    },

    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
    relative: (date: Date): string => {
        const now = new Date();
        const diff = now.getTime() - date.getTime();
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes} ${plural(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')} –Ω–∞–∑–∞–¥`;
        if (hours < 24) return `${hours} ${plural(hours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')} –Ω–∞–∑–∞–¥`;
        if (days < 7) return `${days} ${plural(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} –Ω–∞–∑–∞–¥`;

        return formatDate.date(date);
    }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const formatDuration = {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    fromSeconds: (seconds: number): string => {
        if (seconds < 60) return `${seconds} —Å–µ–∫`;
        if (seconds < 3600) {
            const minutes = Math.floor(seconds / 60);
            return `${minutes} ${plural(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`;
        }
        
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return `${hours} ${plural(hours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')} ${minutes} ${plural(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    fromMs: (ms: number): string => {
        return formatDuration.fromSeconds(Math.floor(ms / 1000));
    }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
export const formatText = {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    safeHtml: (text: string): string => {
        return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    },

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    truncate: (text: string, length: number): string => {
        if (text.length <= length) return text;
        return text.slice(0, length - 3) + '...';
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    list: (items: string[]): string => {
        return items.map((item, index) => `${index + 1}. ${item}`).join('\n');
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    link: (text: string, url: string): string => {
        return `<a href="${url}">${formatText.safeHtml(text)}</a>`;
    }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
export function plural(number: number, one: string, few: string, many: string): string {
    const mod10 = number % 10;
    const mod100 = number % 100;

    if (mod100 >= 11 && mod100 <= 20) {
        return many;
    }

    if (mod10 === 1) {
        return one;
    }

    if (mod10 >= 2 && mod10 <= 4) {
        return few;
    }

    return many;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const formatStats = {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    referral: (count: number, earnings: number): string => {
        return `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${formatNumber.default(count)} ${plural(count, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}\n` +
               `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber.currency(earnings, 'RUB')}`;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
    photoProcessing: (total: number, success: number, failed: number): string => {
        return `üì∏ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber.default(total)}\n` +
               `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${formatNumber.default(success)}\n` +
               `‚ùå –û—à–∏–±–æ–∫: ${formatNumber.default(failed)}`;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    payments: (total: number, count: number): string => {
        return `üí∞ –°—É–º–º–∞: ${formatNumber.currency(total, 'RUB')}\n` +
               `üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${formatNumber.default(count)}`;
    }
};