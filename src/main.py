import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiohttp import web
import json
from typing import Optional, Dict, Any
import base64

from config import load_config
from database import Database
from styles import AVATAR_STYLES, QUALITY_PRESETS
from managers.variants import VariantsManager
from managers.quality import QualityManager
from managers.notifications import NotificationManager
from managers.statistics import StatisticsManager
from utils.image_processing import ensure_image_requirements
from utils.webhook_utils import validate_webhook_request, WebhookResponse, setup_webhook_routes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.telegram.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config.db.url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
variants_manager = VariantsManager()
quality_manager = QualityManager(db)
notification_manager = NotificationManager(bot, db)
statistics_manager = StatisticsManager(db)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserState(StatesGroup):
    waiting_for_photo = State()
    choosing_style = State()
    choosing_position = State()
    choosing_balance = State()
    choosing_variations = State()
    waiting_for_generation = State()

# –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
active_generations: Dict[str, Dict[str, Any]] = {}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Processing /start command from user {message.from_user.id}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.register_user(message.from_user.id, message.from_user.username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        has_sub, images_left = db.check_subscription(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.\n"
            "üé® –Ø –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=keyboard
        )
        
        await message.answer(
            f"üí´ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")
async def request_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        has_sub, images_left = db.check_subscription(message.from_user.id)
        
        if images_left <= 0:
            await message.answer(
                "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n"
                "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            )
            return
        
        await UserState.waiting_for_photo.set()
        await message.answer(
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            f"- –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            f"- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            f"- –ß—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}"
        )
        
    except Exception as e:
        logger.error(f"Error in request_photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(content_types=['photo'], state=UserState.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = await message.photo[-1].download(destination_file=io.BytesIO())
        photo_bytes = photo.getvalue()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_bytes = ensure_image_requirements(photo_bytes)
        if not photo_bytes:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB\n"
                "- –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ JPEG –∏–ª–∏ PNG\n"
                "- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024x1024"
            )
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['original_photo'] = photo_bytes
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for style in AVATAR_STYLES.keys():
            keyboard.add(types.KeyboardButton(style))
        
        await UserState.choosing_style.set()
        await message.answer(
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∞:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        await state.finish()

@dp.message_handler(state=UserState.choosing_style)
async def handle_style_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    try:
        style = message.text
        if style not in AVATAR_STYLES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        
        async with state.proxy() as data:
            data['style'] = style
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_params = await quality_manager.get_generation_params(
            message.from_user.id,
            AVATAR_STYLES[style].__dict__
        )
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        estimated_time = quality_manager._estimate_generation_time(quality_params)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        processing_msg = await message.answer(
            f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–∏–ª–µ '{style}'...\n"
            f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time} —Å–µ–∫."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            photo_bytes = data['original_photo']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            request_id = await start_generation_with_clothoff(
                photo_bytes,
                quality_params
            )
            
            if not request_id:
                raise Exception("Failed to start generation")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            active_generations[request_id] = {
                "user_id": message.from_user.id,
                "style": style,
                "params": quality_params,
                "progress_message_id": processing_msg.message_id,
                "start_time": datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await statistics_manager.update_statistics(
                message.from_user.id,
                {
                    'style': style,
                    'params': quality_params,
                    'status': 'started'
                }
            )
            
            await UserState.waiting_for_generation.set()
            async with state.proxy() as data:
                data['current_generation'] = request_id
            
        except Exception as gen_error:
            logger.error(f"Generation error: {gen_error}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.finish()
            return
            
    except Exception as e:
        logger.error(f"Error handling style selection: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Clothoff API
async def start_generation_with_clothoff(
    image_bytes: bytes,
    params: dict
) -> Optional[str]:
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Clothoff API"""
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "image": base64_image,
            "prompt": params["prompt"],
            "negative_prompt": params.get("negative_prompt", "nude, naked, nsfw, bad quality, blurry, deformed"),
            "guidance_scale": params.get("guidance_scale", 7.5),
            "image_guidance_scale": params.get("image_guidance_scale", 1.3),
            "position": params.get("position", "face"),
            "num_inference_steps": params.get("num_inference_steps", 50),
            "num_outputs": params.get("num_outputs", 1),
            "webhook_url": f"{config.webhook.base_url}{config.webhook.path}",
            "webhook_events": ["completed", "failed", "progress"]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{config.clothoff.api_url}/image/generate",
                headers={
                    "X-API-Key": config.clothoff.api_key,
                    "Content-Type": "application/json"
                },
                json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Clothoff API error: {error_text}")
                    return None
                
                result = await response.json()
                return result.get("request_id")
                
    except Exception as e:
        logger.error(f"Error in start_generation_with_clothoff: {e}")
        return None

async def handle_webhook(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç Clothoff API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
        if not await validate_webhook_request(request, config.webhook.secret):
            return WebhookResponse.unauthorized()
        
        data = await request.json()
        request_id = data.get("request_id")
        status = data.get("status")
        event = data.get("event")
        
        if not request_id or request_id not in active_generations:
            logger.warning(f"Received webhook for unknown request_id: {request_id}")
            return WebhookResponse.not_found()
            
        generation_data = active_generations[request_id]
        user_id = generation_data.get("user_id")
        
        if event == "progress":
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = data.get("progress", 0)
            await notification_manager.send_progress_notification(
                user_id,
                progress,
                request_id,
                generation_data.get("progress_message_id")
            )
            
        elif event == "completed":
            images_data = data.get("result", {}).get("images", [])
            if not images_data:
                logger.error(f"No images in completed webhook: {data}")
                await notification_manager.send_error_notification(
                    user_id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
                return WebhookResponse.error("No images in result")
                
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                image_bytes_list = [base64.b64decode(img) for img in images_data]
                await variants_manager.add_variants(
                    request_id,
                    image_bytes_list,
                    generation_data.get("params", {})
                )
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                media_group = []
                for i, image_bytes in enumerate(image_bytes_list):
                    media_group.append(
                        types.InputMediaPhoto(
                            media=io.BytesIO(image_bytes),
                            caption=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}" if i == 0 else None
                        )
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                db.update_images_count(user_id)
                _, images_left = db.check_subscription(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await bot.send_media_group(user_id, media_group)
                await bot.send_message(
                    user_id,
                    f"‚ú® –û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}"
                )
                
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å
                if len(media_group) > 1:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(
                        "üîç –°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                        callback_data=f"compare_{request_id}"
                    ))
                    await bot.send_message(
                        user_id,
                        "–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?",
                        reply_markup=keyboard
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await statistics_manager.update_statistics(
                    user_id,
                    {
                        'style': generation_data['style'],
                        'params': generation_data['params'],
                        'status': 'success'
                    }
                )
                
            except Exception as e:
                logger.error(f"Error processing completed webhook: {e}")
                await notification_manager.send_error_notification(
                    user_id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                )
                
        elif event == "failed":
            error_info = data.get("error", {})
            error_message = error_info.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            await notification_manager.send_error_notification(
                user_id,
                error_message,
                retry_allowed=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await statistics_manager.update_statistics(
                user_id,
                {
                    'style': generation_data['style'],
                    'params': generation_data['params'],
                    'status': 'failed',
                    'error': error_message
                }
            )
            
        if status in ["completed", "failed"]:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            variants_manager.cleanup_variants(request_id)
            del active_generations[request_id]
        
        return WebhookResponse.success()
        
    except Exception as e:
        logger.error(f"Error in webhook handler: {e}")
        return WebhookResponse.server_error()

@dp.callback_query_handler(lambda c: c.data.startswith('compare_'))
async def handle_comparison_request(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    try:
        request_id = callback_query.data.replace('compare_', '')
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_image = await variants_manager.create_comparison_grid(request_id)
        if not comparison_image:
            await callback_query.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
        await bot.send_photo(
            callback_query.from_user.id,
            comparison_image,
            caption="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
        )
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error handling comparison request: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

@dp.message_handler(commands=['stats'])
async def show_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = await statistics_manager.get_user_statistics(message.from_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {stats['total_generations']}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_generations']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%\n\n"
            "üé® –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∏–ª—è–º
        for style, count in sorted(
            stats['style_statistics'].items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]:
            percentage = count / stats['total_generations'] * 100
            stats_message += f"- {style}: {count} ({percentage:.1f}%)\n"
        
        await message.answer(stats_message)
        
    except Exception as e:
        logger.error(f"Error showing statistics: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message_handler(commands=['quality'])
async def show_quality_settings(message: types.Message):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        presets = await quality_manager.get_available_presets()
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for preset_name, preset_info in presets.items():
            keyboard.add(types.InlineKeyboardButton(
                f"{preset_info['name'].title()} "
                f"({preset_info['steps']} —à–∞–≥–æ–≤, ~{preset_info['estimated_time']} —Å–µ–∫.)",
                callback_data=f"set_quality_{preset_name}"
            ))
        
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing quality settings: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞")

@dp.message_handler(commands=['help'])
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/quality - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:
"""
    
    for style in AVATAR_STYLES:
        help_text += f"‚Ä¢ {style}\n"
        
    help_text += """
üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
"""
    
    await message.answer(help_text)

async def on_startup(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    await bot.set_webhook(f"{config.webhook.base_url}{config.webhook.path}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
    await setup_webhook_routes(app, handle_webhook)
    
    logger.info(f"Bot @{(await bot.me).username} started")

def setup_app() -> web.Application:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    app.on_startup.append(on_startup)
    return app

async def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    session = aiohttp.ClientSession()
    await session.close()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = setup_app()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
    web.run_app(
        app,
        host=config.webhook.host,
        port=config.webhook.port,
        shutdown_timeout=60,
    )

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logger.error(f"Error in main: {e}")
    finally:
        asyncio.run(cleanup())