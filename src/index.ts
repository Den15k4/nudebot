import { Telegraf, Context } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';
import { Update } from 'typegram';
import { message } from 'telegraf/filters';
import axios from 'axios';
import { Pool } from 'pg';
import dotenv from 'dotenv';
import FormData from 'form-data';
import express from 'express';
import multer from 'multer';
import { RukassaPayment, setupPaymentCommands, setupRukassaWebhook } from './rukassa';
import { MultiBotManager } from './multibot';

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const BOT_TOKEN = process.env.BOT_TOKEN || '7543266158:AAETR2eLuk2joRxh6w2IvPePUw2LZa8_56U';
const CLOTHOFF_API_KEY = process.env.CLOTHOFF_API_KEY || '4293b3bc213bba6a74011fba8d4ad9bd460599d9';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://nudebot-production.up.railway.app/webhook';
const PORT = parseInt(process.env.PORT || '8080', 10);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ApiResponse {
    queue_time?: number;
    queue_num?: number;
    api_balance?: number;
    id_gen?: string;
    error?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    age?: string;
}

interface ProcessingResult {
    queueTime?: number;
    queueNum?: number;
    apiBalance?: number;
    idGen?: string;
}

interface WebhookBody {
    id_gen?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    result?: string;
    error?: string;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤
const multiBotManager = new MultiBotManager(pool);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
const mainBot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
const apiClient = axios.create({
    baseURL: 'https://public-api.clothoff.net',
    headers: {
        'accept': 'application/json',
        'x-api-key': CLOTHOFF_API_KEY
    }
});

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
const app = express();
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024
    }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
    console.log('–í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:', {
        method: req.method,
        path: req.path,
        headers: req.headers
    });
    next();
});

app.use(express.json());

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function initDB() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        await client.query(`
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                credits INT DEFAULT 1,
                created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                last_used TIMESTAMPTZ,
                pending_task_id TEXT,
                bot_id TEXT DEFAULT 'main'
            );

            CREATE TABLE IF NOT EXISTS bots (
                bot_id TEXT PRIMARY KEY,
                token TEXT NOT NULL,
                partner_id TEXT,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await client.query(`
            INSERT INTO bots (bot_id, token) 
            VALUES ('main', $1) 
            ON CONFLICT (bot_id) DO NOTHING
        `, [BOT_TOKEN]);

        await client.query('COMMIT');
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        await client.query('ROLLBACK');
        if (error instanceof Error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        }
        throw error;
    } finally {
        client.release();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function checkCredits(userId: number, botId: string = 'main'): Promise<number> {
    try {
        const result = await pool.query(
            'SELECT credits FROM users WHERE user_id = $1 AND bot_id = $2',
            [userId, botId]
        );
        return result.rows[0]?.credits || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
        throw error;
    }
}

async function useCredit(userId: number, botId: string = 'main'): Promise<void> {
    try {
        await pool.query(
            'UPDATE users SET credits = credits - 1, last_used = CURRENT_TIMESTAMP WHERE user_id = $1 AND bot_id = $2',
            [userId, botId]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    }
}

async function returnCredit(userId: number, botId: string = 'main'): Promise<void> {
    try {
        await pool.query(
            'UPDATE users SET credits = credits + 1 WHERE user_id = $1 AND bot_id = $2',
            [userId, botId]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    }
}

async function addNewUser(userId: number, username: string | undefined, botId: string = 'main'): Promise<void> {
    try {
        await pool.query(
            'INSERT INTO users (user_id, username, bot_id, credits) VALUES ($1, $2, $3, 1) ON CONFLICT (user_id) DO NOTHING',
            [userId, username || 'anonymous', botId]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
async function isAdultContent(): Promise<boolean> {
    try {
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:', error);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
async function processImage(imageBuffer: Buffer, userId: number, botId: string = 'main'): Promise<ProcessingResult> {
    const formData = new FormData();
    const id_gen = `${botId}_${userId}_${Date.now()}`;
    
    formData.append('cloth', 'naked');
    formData.append('image', imageBuffer, {
        filename: 'image.jpg',
        contentType: 'image/jpeg'
    });
    formData.append('id_gen', id_gen);
    formData.append('webhook', WEBHOOK_URL);

    try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ API —Å –ø–æ–ª—è–º–∏:', {
            cloth: 'naked',
            id_gen,
            webhook: WEBHOOK_URL,
            hasImage: !!imageBuffer,
            botId
        });

        const response = await apiClient.post('/undress', formData, {
            headers: {
                ...formData.getHeaders(),
                'x-api-key': CLOTHOFF_API_KEY
            },
            maxBodyLength: Infinity,
            timeout: 120000
        });
        
        console.log('–û—Ç–≤–µ—Ç API:', response.data);
        
        const apiResponse: ApiResponse = response.data;
        
        if (apiResponse.error) {
            if (apiResponse.error === 'Insufficient balance') {
                throw new Error('INSUFFICIENT_BALANCE');
            }
            throw new Error(`API Error: ${apiResponse.error}`);
        }
        
        await pool.query(
            'UPDATE users SET pending_task_id = $1 WHERE user_id = $2 AND bot_id = $3',
            [id_gen, userId, botId]
        );
        
        return {
            queueTime: apiResponse.queue_time,
            queueNum: apiResponse.queue_num,
            apiBalance: apiResponse.api_balance,
            idGen: id_gen
        };
    } catch (error) {
        if (axios.isAxiosError(error) && error.response?.data) {
            console.error('API Error Response:', error.response.data);
            if (error.response.data.error === 'Insufficient balance') {
                throw new Error('INSUFFICIENT_BALANCE');
            }
            throw new Error(`API Error: ${error.response.data.error || 'Unknown error'}`);
        }
        throw error;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
function setupBotHandlers(bot: Telegraf<Context<Update>>, botId: string = 'main') {
    bot.command('start', async (ctx: Context) => {
        try {
            const userId = ctx.from?.id;
            const username = ctx.from?.username;

            if (!userId) {
                return;
            }

            await addNewUser(userId, username, botId);
            
            await ctx.reply(
                '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n' +
                '–£ –≤–∞—Å –µ—Å—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç.\n' +
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ.\n\n' +
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
                '/credits - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤\n' +
                '/buy - –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã'
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    bot.command('credits', async (ctx: Context) => {
        try {
            const userId = ctx.from?.id;
            if (!userId) return;

            const credits = await checkCredits(userId, botId);
            await ctx.reply(`üí≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∫—Ä–µ–¥–∏—Ç–æ–≤: ${credits}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    bot.on(message('photo'), async (ctx: Context<Update.MessageUpdate>) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        let processingMsg;
        
        try {
            const credits = await checkCredits(userId, botId);

            if (credits <= 0) {
                return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.');
            }

            await ctx.reply(
                '‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n' +
                '1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç\n' +
                '2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ\n' +
                '3. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n' +
                '‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...'
            );

            processingMsg = await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const file = await ctx.telegram.getFile(photo.file_id);
            
            if (!file.file_path) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
            }

            const imageResponse = await axios.get(
                `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`,
                { responseType: 'arraybuffer' }
            );

            const imageBuffer = Buffer.from(imageResponse.data);

            if (!await isAdultContent()) {
                throw new Error('AGE_RESTRICTION');
            }

            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            const result = await processImage(imageBuffer, userId, botId);

            if (result.idGen) {
                await useCredit(userId, botId);
                await ctx.reply(
                    '‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n' +
                    `üïí –í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${result.queueTime} —Å–µ–∫\n` +
                    `üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${result.queueNum}\n` +
                    `üîÑ ID –∑–∞–¥–∞—á–∏: ${result.idGen}\n\n` +
                    '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.'
                );
            }

            if (processingMsg) {
                await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id).catch(() => {});
            }

        } catch (error) {
            let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
            
            if (error instanceof Error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
                
                switch (error.message) {
                    case 'AGE_RESTRICTION':
                        errorMessage = 'üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.';
                        break;
                    case 'INSUFFICIENT_BALANCE':
                        errorMessage = '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                        break;
                    default:
                        errorMessage += `\n${error.message}`;
                }
            }

            await ctx.reply(errorMessage);

            if (processingMsg) {
                await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id).catch(() => {});
            }
        }
    });
}

   // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±–æ—Ç–∞
   const rukassaPayment = new RukassaPayment(pool, bot, botId);
   rukassaPayment.initPaymentsTable();
   setupPaymentCommands(bot, pool, botId);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
app.post('/webhook', upload.any(), async (req, res) => {
   try {
       console.log('–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å');
       console.log('Headers:', req.headers);
       console.log('Body:', req.body);
       console.log('Files:', req.files);

       const body = req.body as WebhookBody;
       const files = req.files as Express.Multer.File[] || [];

       // –ò–∑–≤–ª–µ–∫–∞–µ–º botId –∏–∑ id_gen (—Ñ–æ—Ä–º–∞—Ç: botId_userId_timestamp)
       const botId = body.id_gen?.split('_')[0] || 'main';
       const bot = botId === 'main' ? mainBot : multiBotManager.getBot(botId);

       if (!bot) {
           throw new Error(`–ë–æ—Ç ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
       }

       if (body.status === '500' || body.img_message || body.img_message_2) {
           console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${body.img_message || body.img_message_2}`);
           
           const userQuery = await pool.query(
               'SELECT user_id FROM users WHERE pending_task_id = $1 AND bot_id = $2',
               [body.id_gen, botId]
           );

           if (userQuery.rows.length > 0) {
               const userId = userQuery.rows[0].user_id;
               let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n';

               if (body.img_message?.includes('Age is too young') || body.img_message_2?.includes('Age is too young')) {
                   errorMessage += 'üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n' +
                                 '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.';
               } else {
                   errorMessage += body.img_message || body.img_message_2 || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
               }

               try {
                   await bot.telegram.sendMessage(userId, errorMessage);
                   await returnCredit(userId, botId);
                   await bot.telegram.sendMessage(userId, 'üí≥ –ö—Ä–µ–¥–∏—Ç –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
                   
                   await pool.query(
                       'UPDATE users SET pending_task_id = NULL WHERE user_id = $1 AND bot_id = $2',
                       [userId, botId]
                   );
               } catch (sendError) {
                   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
               }
           }

           return res.status(200).json({ success: true, error: body.img_message || body.img_message_2 });
       }

       if (!body.result && files.length === 0) {
           console.log('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ');
           return res.status(200).json({ success: true });
       }

       const userQuery = await pool.query(
           'SELECT user_id FROM users WHERE pending_task_id = $1 AND bot_id = $2',
           [body.id_gen, botId]
       );

       if (userQuery.rows.length > 0) {
           const userId = userQuery.rows[0].user_id;

           try {
               console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);
               
               let imageBuffer: Buffer | undefined;
               if (body.result) {
                   imageBuffer = Buffer.from(body.result, 'base64');
               } else if (files.length > 0) {
                   imageBuffer = files[0].buffer;
               }

               if (imageBuffer) {
                   await bot.telegram.sendPhoto(userId, { source: imageBuffer });
                   await bot.telegram.sendMessage(userId, '‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
               }

               await pool.query(
                   'UPDATE users SET pending_task_id = NULL WHERE user_id = $1 AND bot_id = $2',
                   [userId, botId]
               );
               console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
           } catch (sendError) {
               console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', sendError);
           }
       } else {
           console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', body.id_gen);
       }

       res.status(200).json({ success: true });
   } catch (error) {
       console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
       res.status(500).json({ error: 'Internal server error' });
   }
});

// –ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
app.get('/health', (req, res) => {
   res.status(200).json({ 
       status: 'ok', 
       timestamp: new Date().toISOString(),
       botsCount: multiBotManager.getBotsCount()
   });
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function start() {
   try {
       await initDB();
       console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

       // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
       setupBotHandlers(mainBot, 'main');
       console.log('–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

       // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤
       await multiBotManager.loadAllBots();
       console.log('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

       // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Ö—É–∫–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
       setupRukassaWebhook(app, multiBotManager);
       console.log('–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –≤–µ–±-—Ö—É–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

       // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
       app.listen(PORT, '0.0.0.0', () => {
           console.log(`Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
       });

       // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
       await mainBot.launch();
       console.log('–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');

   } catch (error) {
       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
       process.exit(1);
   }
}

// Graceful shutdown
process.once('SIGINT', async () => {
   console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
   mainBot.stop('SIGINT');
   await multiBotManager.stopAllBots();
   await pool.end();
});

process.once('SIGTERM', async () => {
   console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
   mainBot.stop('SIGTERM');
   await multiBotManager.stopAllBots();
   await pool.end();
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
start();