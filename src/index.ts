import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import axios from 'axios';
import { Pool } from 'pg';
import dotenv from 'dotenv';
import FormData from 'form-data';
import express from 'express';
import multer from 'multer';
import { RukassaPayment, setupPaymentCommands, setupRukassaWebhook } from './rukassa';

dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnv() {
    const required = ['BOT_TOKEN', 'CLOTHOFF_API_KEY', 'DATABASE_URL', 'WEBHOOK_URL'];
    const missing = required.filter(key => !process.env[key]);
    if (missing.length > 0) {
        throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }
}

validateEnv();

const BOT_TOKEN = process.env.BOT_TOKEN!;
const CLOTHOFF_API_KEY = process.env.CLOTHOFF_API_KEY!;
const BASE_WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://nudebot-production.up.railway.app';
const CLOTHOFF_WEBHOOK_URL = `${BASE_WEBHOOK_URL}/webhook`;
const PORT = parseInt(process.env.PORT || '8080', 10);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    inline_keyboard: [
        [
            { text: 'üí´ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data: 'start_processing' },
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }
        ],
        [
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'check_balance' },
            { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral_program' }
        ]
    ]
};

const cancelKeyboard = {
    inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_menu' }]
    ]
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ApiResponse {
    queue_time?: number;
    queue_num?: number;
    api_balance?: number;
    id_gen?: string;
    error?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    age?: string;
}

interface ProcessingResult {
    queueTime?: number;
    queueNum?: number;
    apiBalance?: number;
    idGen?: string;
}

interface WebhookBody {
    id_gen?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    result?: string;
    error?: string;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    },
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
});

const bot = new Telegraf(BOT_TOKEN);

const apiClient = axios.create({
    baseURL: 'https://public-api.clothoff.net',
    headers: {
        'accept': 'application/json',
        'x-api-key': CLOTHOFF_API_KEY
    },
    timeout: 120000
});

const app = express();
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024
    }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
    console.log('–í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:', {
        method: req.method,
        path: req.path,
        headers: req.headers,
        query: req.query,
        timestamp: new Date().toISOString()
    });
    next();
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        const tablesExist = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'users'
            );
        `);

        if (!tablesExist.rows[0].exists) {
            await client.query(`
                CREATE TABLE users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    credits INT DEFAULT 0,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    last_used TIMESTAMPTZ,
                    pending_task_id TEXT,
                    referrer_id BIGINT,
                    total_referrals INT DEFAULT 0,
                    referral_earnings DECIMAL DEFAULT 0.0
                );

                CREATE INDEX idx_referrer_id ON users(referrer_id);
                CREATE INDEX idx_pending_task ON users(pending_task_id);
                CREATE INDEX idx_last_used ON users(last_used);
            `);
        }

        await client.query('COMMIT');
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
async function cleanupStaleTasks() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        const staleResults = await client.query(`
            UPDATE users 
            SET pending_task_id = NULL 
            WHERE pending_task_id IS NOT NULL 
            AND last_used < NOW() - INTERVAL '30 minutes'
            RETURNING user_id
        `);

        for (const row of staleResults.rows) {
            await returnCredit(row.user_id);
            await bot.telegram.sendMessage(
                row.user_id,
                '‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö—Ä–µ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω.',
                { 
                    reply_markup: mainKeyboard
                }
            ).catch(console.error);
        }

        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á:', error);
    } finally {
        client.release();
    }
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
async function processReferral(userId: number, referrerId: number): Promise<void> {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        const referrer = await client.query(
            'SELECT user_id FROM users WHERE user_id = $1',
            [referrerId]
        );
        
        if (!referrer.rows.length) {
            throw new Error('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (userId === referrerId) {
            throw new Error('–ù–µ–ª—å–∑—è –±—ã—Ç—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º');
        }

        const existingUser = await client.query(
            'SELECT referrer_id FROM users WHERE user_id = $1',
            [userId]
        );
        
        if (!existingUser.rows[0]?.referrer_id) {
            const referrerChain = await client.query(`
                WITH RECURSIVE ref_chain AS (
                    SELECT user_id, referrer_id, 1 as depth
                    FROM users 
                    WHERE user_id = $1
                    UNION ALL
                    SELECT u.user_id, u.referrer_id, rc.depth + 1
                    FROM users u
                    INNER JOIN ref_chain rc ON rc.referrer_id = u.user_id
                    WHERE rc.depth < 10
                )
                SELECT user_id FROM ref_chain WHERE user_id = $2
            `, [referrerId, userId]);

            if (referrerChain.rows.length > 0) {
                throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å');
            }

            await client.query(
                'UPDATE users SET referrer_id = $1 WHERE user_id = $2',
                [referrerId, userId]
            );
            
            await client.query(
                'UPDATE users SET total_referrals = total_referrals + 1 WHERE user_id = $1',
                [referrerId]
            );

            await bot.telegram.sendMessage(
                referrerId,
                'üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 50% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π.'
            ).catch(console.error);
        }
        
        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    } finally {
        client.release();
    }
}

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function getUser(userId: number) {
    try {
        const result = await pool.query(
            'SELECT * FROM users WHERE user_id = $1',
            [userId]
        );
        return result.rows[0];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

async function checkCredits(userId: number): Promise<number> {
    try {
        const user = await getUser(userId);
        return user?.credits || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤');
    }
}

async function useCredit(userId: number): Promise<void> {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        const result = await client.query(
            'UPDATE users SET credits = credits - 1, last_used = CURRENT_TIMESTAMP WHERE user_id = $1 AND credits > 0 RETURNING credits',
            [userId]
        );

        if (result.rows.length === 0) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤');
        }

        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    } finally {
        client.release();
    }
}
async function returnCredit(userId: number): Promise<void> {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        await client.query(
            'UPDATE users SET credits = credits + 1 WHERE user_id = $1',
            [userId]
        );

        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    } finally {
        client.release();
    }
}

async function addNewUser(userId: number, username: string | undefined): Promise<void> {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        await client.query(
            'INSERT INTO users (user_id, username, credits) VALUES ($1, $2, 0) ON CONFLICT (user_id) DO NOTHING',
            [userId, username || 'anonymous']
        );

        await client.query('COMMIT');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function isAdultContent(): Promise<boolean> {
    return true; // –ó–∞–≥–ª—É—à–∫–∞
}

async function processImage(imageBuffer: Buffer, userId: number): Promise<ProcessingResult> {
    const formData = new FormData();
    const id_gen = `user_${userId}_${Date.now()}`;
    
    formData.append('cloth', 'naked');
    formData.append('image', imageBuffer, {
        filename: 'image.jpg',
        contentType: 'image/jpeg'
    });
    formData.append('id_gen', id_gen);
    formData.append('webhook', CLOTHOFF_WEBHOOK_URL);

    try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ API:', {
            id_gen,
            webhook: CLOTHOFF_WEBHOOK_URL,
            timestamp: new Date().toISOString()
        });

        const response = await apiClient.post('/undress', formData, {
            headers: {
                ...formData.getHeaders(),
                'x-api-key': CLOTHOFF_API_KEY
            },
            maxBodyLength: Infinity
        });
        
        console.log('–û—Ç–≤–µ—Ç API:', response.data);
        
        const apiResponse: ApiResponse = response.data;
        
        if (apiResponse.error) {
            if (apiResponse.error === 'Insufficient balance') {
                throw new Error('INSUFFICIENT_BALANCE');
            }
            throw new Error(`API Error: ${apiResponse.error}`);
        }
        
        await pool.query(
            'UPDATE users SET pending_task_id = $1 WHERE user_id = $2',
            [id_gen, userId]
        );
        
        return {
            queueTime: apiResponse.queue_time,
            queueNum: apiResponse.queue_num,
            apiBalance: apiResponse.api_balance,
            idGen: id_gen
        };
    } catch (error) {
        if (axios.isAxiosError(error)) {
            console.error('API Error Response:', error.response?.data);
            if (error.response?.data?.error === 'Insufficient balance') {
                throw new Error('INSUFFICIENT_BALANCE');
            }
            throw new Error(`API Error: ${error.response?.data?.error || 'Unknown error'}`);
        }
        throw error;
    }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    try {
        const userId = ctx.from.id;
        const username = ctx.from.username;
        const args = ctx.message.text.split(' ');
        
        await addNewUser(userId, username);
        
        if (args[1] && args[1].startsWith('ref')) {
            const referrerId = parseInt(args[1].substring(3));
            if (referrerId && referrerId !== userId) {
                try {
                    await processReferral(userId, referrerId);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
                }
            }
        }
        
        await ctx.replyWithPhoto(
            { source: './assets/welcome.jpg' },
            {
                caption: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
                        '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n' +
                        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∫—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã.\n\n' +
                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup: mainKeyboard
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
bot.action('start_processing', async (ctx) => {
    try {
        if (!ctx.from) {
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        const userId = ctx.from.id;
        const credits = await checkCredits(userId);

        if (credits <= 0) {
            await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!');
            await ctx.editMessageCaption(
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
                            [{ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                        ]
                    }
                }
            );
            return;
        }

        await ctx.answerCbQuery();
        await ctx.editMessageCaption(
            'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n' +
            '‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n' +
            '1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç\n' +
            '2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ\n' +
            '3. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
            { reply_markup: cancelKeyboard }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('check_balance', async (ctx) => {
    try {
        if (!ctx.from) {
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const userId = ctx.from.id;
        const credits = await checkCredits(userId);

        await ctx.answerCbQuery();
        await ctx.editMessageCaption(
            `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n` +
            '1 –∫—Ä–µ–¥–∏—Ç = 1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
                        [{ text: '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('referral_program', async (ctx) => {
    try {
        if (!ctx.from) {
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const userId = ctx.from.id;
        const user = await pool.query(
            'SELECT total_referrals, referral_earnings FROM users WHERE user_id = $1',
            [userId]
        );

        const botInfo = await bot.telegram.getMe();
        const referralLink = `https://t.me/${botInfo.username}?start=ref${userId}`;
        const totalReferrals = user.rows[0]?.total_referrals || 0;
        const earnings = user.rows[0]?.referral_earnings || 0;

        await ctx.answerCbQuery();
        await ctx.editMessageCaption(
            'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n' +
            'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
            `${referralLink}\n\n` +
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' +
            `üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferrals}\n` +
            `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnings.toFixed(2)} RUB\n\n` +
            'üí° –ü–æ–ª—É—á–∞–π—Ç–µ 50% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'refresh_referrals' }],
                        [{ text: '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('refresh_referrals', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        if (!ctx.from) {
            return;
        }

        const userId = ctx.from.id;
        const user = await pool.query(
            'SELECT total_referrals, referral_earnings FROM users WHERE user_id = $1',
            [userId]
        );

        const botInfo = await bot.telegram.getMe();
        const referralLink = `https://t.me/${botInfo.username}?start=ref${userId}`;
        const totalReferrals = user.rows[0]?.total_referrals || 0;
        const earnings = user.rows[0]?.referral_earnings || 0;

        await ctx.editMessageCaption(
            'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n' +
            'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
            `${referralLink}\n\n` +
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' +
            `üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferrals}\n` +
            `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnings.toFixed(2)} RUB\n\n` +
            'üí° –ü–æ–ª—É—á–∞–π—Ç–µ 50% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'refresh_referrals' }],
                        [{ text: '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('back_to_menu', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.editMessageCaption(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            { reply_markup: mainKeyboard }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on(message('photo'), async (ctx) => {
    const userId = ctx.from.id;
    let processingMsg;
    let creditUsed = false;
    
    try {
        const credits = await checkCredits(userId);

        if (credits <= 0) {
            return ctx.reply(
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
                            [{ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                        ]
                    }
                }
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
        const user = await getUser(userId);
        if (user?.pending_task_id) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                { reply_markup: mainKeyboard }
            );
        }

        processingMsg = await ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        const file = await ctx.telegram.getFile(photo.file_id);
        
        if (!file.file_path) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
        }

        const imageResponse = await axios.get(
            `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`,
            { responseType: 'arraybuffer' }
        );

        const imageBuffer = Buffer.from(imageResponse.data);

        if (!await isAdultContent()) {
            throw new Error('AGE_RESTRICTION');
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
        const result = await processImage(imageBuffer, userId);

        if (result.idGen) {
            await useCredit(userId);
            creditUsed = true;
            await ctx.reply(
                '‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n\n' +
                `‚è± –í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${result.queueTime} —Å–µ–∫\n` +
                `üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${result.queueNum}\n` +
                `üîÑ ID –∑–∞–¥–∞—á–∏: ${result.idGen}\n\n` +
                'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.',
                { reply_markup: mainKeyboard }
            );
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        
        if (creditUsed) {
            try {
                await returnCredit(userId);
                await pool.query(
                    'UPDATE users SET pending_task_id = NULL WHERE user_id = $1',
                    [userId]
                );
            } catch (returnError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞:', returnError);
            }
        }

        let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
        
        if (error instanceof Error) {
            if (error.message === 'AGE_RESTRICTION') {
                errorMessage = 'üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞:\n\n' +
                    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. ' +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.';
            } else if (error.message === 'INSUFFICIENT_BALANCE') {
                errorMessage = '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n' +
                    '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å API. ' +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n' +
                    '–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ.';
            } else {
                errorMessage += `\n${error.message}`;
            }
        }

        await ctx.reply(errorMessage, { reply_markup: mainKeyboard });
    } finally {
        if (processingMsg) {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
            } catch (deleteError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', deleteError);
            }
        }
    }
});

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ClothOff
app.post(['/webhook'], upload.any(), async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç ClothOff:', {
            path: req.path,
            timestamp: new Date().toISOString()
        });
        console.log('Headers:', req.headers);
        console.log('Body:', req.body);
        console.log('Files:', req.files);

        const body = req.body as WebhookBody;
        const files = req.files as Express.Multer.File[] || [];

        if (!body.id_gen) {
            throw new Error('Missing id_gen in webhook');
        }

        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            const userQuery = await client.query(
                'SELECT user_id FROM users WHERE pending_task_id = $1',
                [body.id_gen]
            );

            if (userQuery.rows.length === 0) {
                throw new Error(`User not found for task ${body.id_gen}`);
            }

            const userId = userQuery.rows[0].user_id;

            if (body.status === '500' || body.img_message || body.img_message_2) {
                console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${body.img_message || body.img_message_2}`);
                
                let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n';
                if (body.img_message?.includes('Age is too young') || body.img_message_2?.includes('Age is too young')) {
                    errorMessage += 'üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n' +
                                  '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.';
                } else {
                    errorMessage += body.img_message || body.img_message_2 || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                }

                await returnCredit(userId);
                await client.query(
                    'UPDATE users SET pending_task_id = NULL WHERE user_id = $1',
                    [userId]
                );

                await bot.telegram.sendMessage(userId, errorMessage, { reply_markup: mainKeyboard });
                await bot.telegram.sendMessage(
                    userId,
                    'üí≥ –ö—Ä–µ–¥–∏—Ç –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
                    { reply_markup: mainKeyboard }
                );
            } else {
                let imageBuffer: Buffer | undefined;
                if (body.result) {
                    imageBuffer = Buffer.from(body.result, 'base64');
                } else if (files.length > 0) {
                    imageBuffer = files[0].buffer;
                }

                if (imageBuffer) {
                    await bot.telegram.sendPhoto(
                        userId,
                        { source: imageBuffer },
                        {
                            caption: '‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n' +
                                   '–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí´ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É',
                            reply_markup: mainKeyboard
                        }
                    );
                } else {
                    throw new Error('No image data in webhook response');
                }

                await client.query(
                    'UPDATE users SET pending_task_id = NULL WHERE user_id = $1',
                    [userId]
                );
            }

            await client.query('COMMIT');
            res.status(200).json({ success: true });
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'ok',
        timestamp: new Date().toISOString()
    });
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function start() {
    try {
        await initDB();
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        const rukassaPayment = new RukassaPayment(pool, bot, {
            processReferralPayment: async (userId: number, amount: number) => {
                const client = await pool.connect();
                try {
                    await client.query('BEGIN');
                    
                    const referrerResult = await client.query(
                        'SELECT referrer_id FROM users WHERE user_id = $1',
                        [userId]
                    );
                    
                    if (referrerResult.rows[0]?.referrer_id) {
                        const referrerId = referrerResult.rows[0].referrer_id;
                        const referralBonus = amount * 0.5;
                        
                        await client.query(
                            'UPDATE users SET referral_earnings = referral_earnings + $1 WHERE user_id = $2',
                            [referralBonus, referrerId]
                        );
                        
                        await bot.telegram.sendMessage(
                            referrerId,
                            `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${referralBonus.toFixed(2)} RUB –æ—Ç –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!`
                        );
                    }
                    
                    await client.query('COMMIT');
                } catch (error) {
                    await client.query('ROLLBACK');
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
                } finally {
                    client.release();
                }
            }
        });

        await rukassaPayment.initPaymentsTable();
        console.log('–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        setupPaymentCommands(bot, pool);
        setupRukassaWebhook(app, rukassaPayment);
        console.log('–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
        setInterval(cleanupStaleTasks, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        const WEBHOOK_PATH = '/telegram-webhook';
        const WEBHOOK_URL = `${BASE_WEBHOOK_URL}${WEBHOOK_PATH}`;

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        await bot.telegram.deleteWebhook();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
        app.use(bot.webhookCallback(WEBHOOK_PATH));

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await new Promise<void>((resolve) => {
            app.listen(PORT, '0.0.0.0', () => {
                console.log(`Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
                console.log(`ClothOff webhook URL: ${CLOTHOFF_WEBHOOK_URL}`);
                console.log(`Base webhook URL: ${BASE_WEBHOOK_URL}`);
                resolve();
            });
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot.telegram.setWebhook(WEBHOOK_URL);
        console.log('Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        process.exit(1);
    }
}

// Graceful shutdown
process.once('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
    await bot.telegram.deleteWebhook();
    bot.stop('SIGINT');
    await pool.end();
});

process.once('SIGTERM', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
    await bot.telegram.deleteWebhook();
    bot.stop('SIGTERM');
    await pool.end();
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
start();