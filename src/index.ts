import { Telegraf, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import axios from 'axios';
import { Pool } from 'pg';
import dotenv from 'dotenv';
import FormData from 'form-data';
import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs/promises';
import { scheduleJob, Job } from 'node-schedule';
import { RukassaPayment, setupPaymentCommands, setupRukassaWebhook } from './rukassa';

dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '7543266158:AAETR2eLuk2joRxh6w2IvPePUw2LZa8_56U';
const CLOTHOFF_API_KEY = process.env.CLOTHOFF_API_KEY || '4293b3bc213bba6a74011fba8d4ad9bd460599d9';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://nudebot-production.up.railway.app/webhook';
const PORT = parseInt(process.env.PORT || '8080', 10);
const RULES_URL = 'https://telegra.ph/Pravila-ispolzovaniya-bota-03-27';
const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim());

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–µ–Ω—é –∏ –¥–µ–π—Å—Ç–≤–∏–π
const MENU_ACTIONS = {
    BUY_CREDITS: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã',
    CHECK_BALANCE: 'üí∞ –ë–∞–ª–∞–Ω—Å',
    INFORMATION: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    HELP: '‚ùì –ü–æ–º–æ—â—å',
    BACK: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
    ACCEPT_RULES: '‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞',
    VIEW_RULES: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
};

const ADMIN_ACTIONS = {
    BROADCAST: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞',
    SCHEDULE: 'üïí –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
    STATS: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    CANCEL_BROADCAST: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES = {
    WELCOME: path.join(__dirname, '../assets/welcome.jpg'),
    BALANCE: path.join(__dirname, '../assets/balance.jpg'),
    PAYMENT: path.join(__dirname, '../assets/payment.jpg'),
    PAYMENT_PROCESS: path.join(__dirname, '../assets/payment_process.jpg'),
    REFERRAL: path.join(__dirname, '../assets/referral.jpg')
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ApiResponse {
    queue_time?: number;
    queue_num?: number;
    api_balance?: number;
    id_gen?: string;
    error?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    age?: string;
}

interface ProcessingResult {
    queueTime?: number;
    queueNum?: number;
    apiBalance?: number;
    idGen?: string;
}

interface WebhookBody {
    id_gen?: string;
    status?: string;
    img_message?: string;
    img_message_2?: string;
    result?: string;
    error?: string;
}

interface ScheduledBroadcast {
    id: string;
    date: Date;
    message: string;
    image?: string;
    keyboard?: any;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
const scheduledBroadcasts = new Map<string, Job>();
const awaitingBroadcastMessage = new Set<number>();
const awaitingBroadcastDate = new Set<number>();
const broadcastImage: { [key: number]: string } = {};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
function getMainKeyboard() {
    return {
        reply_markup: Markup.keyboard([
            [MENU_ACTIONS.BUY_CREDITS, MENU_ACTIONS.CHECK_BALANCE],
            [MENU_ACTIONS.INFORMATION, MENU_ACTIONS.HELP],
            [MENU_ACTIONS.BACK]
        ]).resize()
    };
}

function getInitialKeyboard() {
    return {
        reply_markup: Markup.keyboard([
            [MENU_ACTIONS.VIEW_RULES],
            [MENU_ACTIONS.ACCEPT_RULES],
            [MENU_ACTIONS.HELP]
        ]).resize()
    };
}

function getAdminKeyboard() {
    return {
        reply_markup: Markup.keyboard([
            [ADMIN_ACTIONS.BROADCAST, ADMIN_ACTIONS.SCHEDULE],
            [ADMIN_ACTIONS.STATS, ADMIN_ACTIONS.CANCEL_BROADCAST],
            [MENU_ACTIONS.BACK]
        ]).resize()
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
const apiClient = axios.create({
    baseURL: 'https://public-api.clothoff.net',
    headers: {
        'accept': 'application/json',
        'x-api-key': CLOTHOFF_API_KEY
    }
});

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024
    }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
    console.log('–í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:', {
        method: req.method,
        path: req.path,
        headers: req.headers
    });
    next();
});

app.use(express.json());
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π


interface MessageOptions {
    reply_markup?: any;
    parse_mode?: string;
    [key: string]: any;
}

async function sendMessageWithImage(
    ctx: any, 
    imagePath: string, 
    text: string, 
    options?: MessageOptions
) {
    try {
        const image = await fs.readFile(imagePath);
        await ctx.replyWithPhoto(
            { source: image },
            {
                caption: text,
                parse_mode: 'HTML',
                ...options
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', error);
        if (options?.reply_markup) {
            await ctx.reply(text, options);
        } else {
            await ctx.reply(text);
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function initDB() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        const tableExists = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'users'
            );
        `);

        if (!tableExists.rows[0].exists) {
            await client.query(`
                CREATE TABLE users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    credits INT DEFAULT 0,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    last_used TIMESTAMPTZ,
                    pending_task_id TEXT,
                    accepted_rules BOOLEAN DEFAULT FALSE
                );
            `);
            console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ users');
        } else {
            const columnExists = await client.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.columns 
                    WHERE table_name = 'users' 
                    AND column_name = 'accepted_rules'
                );
            `);

            if (!columnExists.rows[0].exists) {
                await client.query(`
                    ALTER TABLE users 
                    ADD COLUMN accepted_rules BOOLEAN DEFAULT FALSE;
                `);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ accepted_rules');
            }
        }

        await client.query('COMMIT');
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function getAllUsers(): Promise<{user_id: number}[]> {
    try {
        const result = await pool.query('SELECT user_id FROM users WHERE accepted_rules = TRUE');
        return result.rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
    }
}

async function getActiveUsers(days: number = 7): Promise<{user_id: number}[]> {
    try {
        const result = await pool.query(`
            SELECT DISTINCT user_id 
            FROM users 
            WHERE last_used >= NOW() - INTERVAL '${days} days'
            AND accepted_rules = TRUE
        `);
        return result.rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
    }
}

async function isAdmin(userId: string): Promise<boolean> {
    return ADMIN_IDS.includes(userId);
}

async function hasAcceptedRules(userId: number): Promise<boolean> {
    try {
        const result = await pool.query(
            'SELECT accepted_rules FROM users WHERE user_id = $1',
            [userId]
        );
        return result.rows[0]?.accepted_rules || false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª:', error);
        return false;
    }
}

async function checkCredits(userId: number): Promise<number> {
    try {
        const result = await pool.query(
            'SELECT credits FROM users WHERE user_id = $1',
            [userId]
        );
        return result.rows[0]?.credits || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
        throw error;
    }
}

async function useCredit(userId: number): Promise<void> {
    try {
        await pool.query(
            'UPDATE users SET credits = credits - 1, last_used = CURRENT_TIMESTAMP WHERE user_id = $1',
            [userId]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    }
}

async function returnCredit(userId: number): Promise<void> {
    try {
        await pool.query(
            'UPDATE users SET credits = credits + 1 WHERE user_id = $1',
            [userId]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞:', error);
        throw error;
    }
}

async function addNewUser(userId: number, username: string | undefined): Promise<void> {
    try {
        await pool.query(
            'INSERT INTO users (user_id, username, credits, accepted_rules) VALUES ($1, $2, 0, FALSE) ON CONFLICT (user_id) DO NOTHING',
            [userId, username || 'anonymous']
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
async function broadcastMessage(
    bot: Telegraf,
    message: string,
    image?: string,
    keyboard?: any,
    onlyActive: boolean = false
): Promise<{ success: number; failed: number }> {
    const users = onlyActive ? await getActiveUsers() : await getAllUsers();
    let successCount = 0;
    let failedCount = 0;

    for (const user of users) {
        try {
            if (image) {
                await sendMessageWithImageBot(
                    bot,
                    user.user_id,
                    image,
                    message,
                    keyboard
                );
            } else {
                await bot.telegram.sendMessage(
                    user.user_id,
                    message,
                    {
                        parse_mode: 'HTML',
                        ...keyboard
                    }
                );
            }
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 50));
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
            failedCount++;
        }
    }

    return { success: successCount, failed: failedCount };
}

function scheduleBroadcast(
    bot: Telegraf,
    date: Date,
    message: string,
    image?: string,
    keyboard?: any
): string {
    const broadcastId = `broadcast_${Date.now()}`;
    
    const job = scheduleJob(date, async () => {
        try {
            await broadcastMessage(bot, message, image, keyboard);
            scheduledBroadcasts.delete(broadcastId);
            
            for (const adminId of ADMIN_IDS) {
                try {
                    await bot.telegram.sendMessage(
                        adminId,
                        `‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n${message.substring(0, 100)}...`
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        }
    });

    scheduledBroadcasts.set(broadcastId, job);
    return broadcastId;
}
// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
async function requireAcceptedRules(ctx: any, next: () => Promise<void>) {
    try {
        const userId = ctx.from?.id.toString();
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω–∞–º –æ–±—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤–∏–ª
        if (isAdmin(userId)) {
            return next();
        }

        if (
            ctx.message?.text === '/start' || 
            ctx.message?.text === MENU_ACTIONS.BACK || 
            ctx.message?.text === MENU_ACTIONS.VIEW_RULES ||
            ctx.message?.text === MENU_ACTIONS.ACCEPT_RULES
        ) {
            return next();
        }

        const accepted = await hasAcceptedRules(ctx.from?.id);
        if (!accepted) {
            await sendMessageWithImage(
                ctx,
                IMAGES.WELCOME,
                '‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞.\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª.',
                getMainKeyboard()
            );
            return;
        }

        return next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª:', error);
        return next();
    }
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
bot.use(requireAcceptedRules);

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    try {
        const userId = ctx.from.id;
        const username = ctx.from.username;

        await addNewUser(userId, username);
        
        const accepted = await hasAcceptedRules(userId);
        if (!accepted) {
            await sendMessageWithImage(
                ctx,
                IMAGES.WELCOME,
                'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
                'ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n\n' +
                '‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n' +
                '1. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n' +
                '2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏\n\n' +
                '‚ùóÔ∏è –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª.',
                { reply_markup: getInitialKeyboard() }
            );
        } else {
            await sendMessageWithImage(
                ctx,
                IMAGES.WELCOME,
                'ü§ñ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n' +
                '–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫—Ä–µ–¥–∏—Ç—ã:\n' +
                '1 –∫—Ä–µ–¥–∏—Ç = 1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
                { reply_markup: getMainKeyboard() }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
bot.command('admin', async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) {
        return;
    }

    await ctx.reply(
        'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { reply_markup: getAdminKeyboard() }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.hears(ADMIN_ACTIONS.BROADCAST, async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    awaitingBroadcastMessage.add(ctx.from.id);
    await ctx.reply(
        'üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' +
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"',
        {
            reply_markup: Markup.keyboard([
                [ADMIN_ACTIONS.CANCEL_BROADCAST],
                [MENU_ACTIONS.BACK]
            ]).resize()
        }
    );
});

bot.hears(ADMIN_ACTIONS.SCHEDULE, async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    awaitingBroadcastDate.add(ctx.from.id);
    await ctx.reply(
        'üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        'DD.MM.YYYY HH:mm\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"',
        {
            reply_markup: Markup.keyboard([
                [ADMIN_ACTIONS.CANCEL_BROADCAST],
                [MENU_ACTIONS.BACK]
            ]).resize()
        }
    );
});

bot.hears(ADMIN_ACTIONS.STATS, async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    try {
        const totalUsers = (await getAllUsers()).length;
        const activeToday = (await getActiveUsers(1)).length;
        const activeWeek = (await getActiveUsers(7)).length;
        const activeMonth = (await getActiveUsers(30)).length;

        const creditsStats = await pool.query(`
            SELECT 
                COUNT(*) as total_users,
                SUM(credits) as total_credits,
                AVG(credits) as avg_credits,
                MAX(credits) as max_credits
            FROM users
            WHERE accepted_rules = TRUE
        `);

        const paymentStats = await pool.query(`
            SELECT 
                COUNT(*) as total_payments,
                SUM(amount) as total_amount
            FROM payments 
            WHERE status = 'paid'
        `);

        await sendMessageWithImage(
            ctx,
            IMAGES.BALANCE,
            'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n' +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
            `üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: ${activeToday}\n` +
            `üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${activeWeek}\n` +
            `üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${activeMonth}\n\n` +
            `üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤:\n` +
            `‚Ä¢ –í—Å–µ–≥–æ: ${creditsStats.rows[0].total_credits || 0}\n` +
            `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${Math.round(creditsStats.rows[0].avg_credits || 0)}\n` +
            `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${creditsStats.rows[0].max_credits || 0}\n\n` +
            `üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:\n` +
            `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${paymentStats.rows[0].total_payments || 0}\n` +
            `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${paymentStats.rows[0].total_amount || 0} RUB\n\n` +
            `üì© –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: ${scheduledBroadcasts.size}`,
            { reply_markup: getAdminKeyboard() }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

bot.hears(ADMIN_ACTIONS.CANCEL_BROADCAST, async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    awaitingBroadcastMessage.delete(ctx.from.id);
    awaitingBroadcastDate.delete(ctx.from.id);
    delete broadcastImage[ctx.from.id];

    await ctx.reply(
        '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        { reply_markup: getAdminKeyboard() }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on(message('text'), async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    if (awaitingBroadcastMessage.has(ctx.from.id)) {
        const text = ctx.message.text;
        
        try {
            const status = await ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
            const result = await broadcastMessage(
                bot, 
                text, 
                broadcastImage[ctx.from.id]
            );

            await ctx.telegram.editMessageText(
                ctx.chat.id,
                status.message_id,
                undefined,
                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `–£—Å–ø–µ—à–Ω–æ: ${result.success}\n` +
                `–û—à–∏–±–æ–∫: ${result.failed}`
            );

            awaitingBroadcastMessage.delete(ctx.from.id);
            delete broadcastImage[ctx.from.id];

            await ctx.reply(
                'üë®‚Äçüíº –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?',
                { reply_markup: getAdminKeyboard() }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
        }
        return;
    }

    if (awaitingBroadcastDate.has(ctx.from.id)) {
        const dateStr = ctx.message.text;
        
        try {
            const [datePart, timePart] = dateStr.split(' ');
            const [day, month, year] = datePart.split('.');
            const [hours, minutes] = timePart.split(':');
            
            const date = new Date(
                parseInt(year),
                parseInt(month) - 1,
                parseInt(day),
                parseInt(hours),
                parseInt(minutes)
            );
            
            if (isNaN(date.getTime()) || date <= new Date()) {
                await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return;
            }

            awaitingBroadcastMessage.add(ctx.from.id);
            awaitingBroadcastDate.delete(ctx.from.id);

            await ctx.reply(
                `üïí –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${date.toLocaleString()}\n\n` +
                '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:',
                {
                    reply_markup: Markup.keyboard([
                        [ADMIN_ACTIONS.CANCEL_BROADCAST],
                        [MENU_ACTIONS.BACK]
                    ]).resize()
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã:', error);
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:mm');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on(message('photo'), async (ctx) => {
    if (!isAdmin(ctx.from.id.toString())) return;

    if (awaitingBroadcastMessage.has(ctx.from.id)) {
        try {
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const file = await ctx.telegram.getFile(photo.file_id);
            
            if (!file.file_path) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
            }

            const response = await axios.get(
                `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`,
                { responseType: 'arraybuffer' }
            );

            const tempPath = path.join(__dirname, `../temp_broadcast_${ctx.from.id}.jpg`);
            await fs.writeFile(tempPath, Buffer.from(response.data));
            
            broadcastImage[ctx.from.id] = tempPath;

            if (ctx.message.caption) {
                const result = await broadcastMessage(
                    bot,
                    ctx.message.caption,
                    tempPath
                );

                await ctx.reply(
                    `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                    `–£—Å–ø–µ—à–Ω–æ: ${result.success}\n` +
                    `–û—à–∏–±–æ–∫: ${result.failed}`,
                    { reply_markup: getAdminKeyboard() }
                );

                awaitingBroadcastMessage.delete(ctx.from.id);
                delete broadcastImage[ctx.from.id];
                await fs.unlink(tempPath).catch(console.error);
            } else {
                await ctx.reply(
                    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:',
                    {
                        reply_markup: Markup.keyboard([
                            [ADMIN_ACTIONS.CANCEL_BROADCAST],
                            [MENU_ACTIONS.BACK]
                        ]).resize()
                    }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    }
});