import { Telegraf, Markup } from 'telegraf';
import axios from 'axios';
import crypto from 'crypto';
import { Pool } from 'pg';
import express from 'express';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Rukassa
const RUKASSA_SHOP_ID = process.env.RUKASSA_SHOP_ID || '';
const RUKASSA_SECRET_KEY = process.env.RUKASSA_SECRET_KEY || '';
const RUKASSA_API_URL = 'https://api.rukassa.is';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Rukassa
interface PaymentPackage {
    id: number;
    credits: number;
    price: number;
    description: string;
}

interface RukassaCreatePaymentResponse {
    status: boolean;
    error?: string;
    pay_url?: string;
    order_id?: string;
}

interface RukassaWebhookBody {
    merchant_order_id: string;
    order_id: string;
    amount: string;
    sign: string;
    status: string;
    payment_method: string;
}

// –ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
const CREDIT_PACKAGES: PaymentPackage[] = [
    { id: 1, credits: 5, price: 199, description: '5 –∫—Ä–µ–¥–∏—Ç–æ–≤' },
    { id: 2, credits: 10, price: 349, description: '10 –∫—Ä–µ–¥–∏—Ç–æ–≤' },
    { id: 3, credits: 20, price: 599, description: '20 –∫—Ä–µ–¥–∏—Ç–æ–≤' }
];

export class RukassaPayment {
    private pool: Pool;
    private bot: Telegraf;

    constructor(pool: Pool, bot: Telegraf) {
        this.pool = pool;
        this.bot = bot;
    }

    async initPaymentsTable() {
        const client = await this.pool.connect();
        try {
            await client.query(`
                CREATE TABLE IF NOT EXISTS payments (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    order_id TEXT UNIQUE,
                    merchant_order_id TEXT UNIQUE,
                    amount DECIMAL,
                    credits INTEGER,
                    status TEXT,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
                );
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ payments —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã payments:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    private generateSign(params: Record<string, string>): string {
        const sortedKeys = Object.keys(params).sort();
        const values = sortedKeys.map(key => params[key]).join(':');
        const signString = `${values}:${RUKASSA_SECRET_KEY}`;
        console.log('–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', signString);
        return crypto
            .createHash('md5')
            .update(signString)
            .digest('hex');
    }

    private validateWebhookSign(data: RukassaWebhookBody): boolean {
        const params = {
            merchant_order_id: data.merchant_order_id,
            order_id: data.order_id,
            amount: data.amount,
            status: data.status
        };
        const calculatedSign = this.generateSign(params);
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:', {
            calculated: calculatedSign,
            received: data.sign
        });
        return calculatedSign === data.sign;
    }

    async createPayment(userId: number, packageId: number): Promise<string> {
        const package_ = CREDIT_PACKAGES.find(p => p.id === packageId);
        if (!package_) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–∞–∫–µ—Ç–∞');
        }

        const merchantOrderId = `${userId}_${Date.now()}`;
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            await this.pool.query(
                'INSERT INTO payments (user_id, merchant_order_id, amount, credits, status) VALUES ($1, $2, $3, $4, $5)',
                [userId, merchantOrderId, package_.price, package_.credits, 'pending']
            );

            console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', {
                shop_id: RUKASSA_SHOP_ID,
                order_id: merchantOrderId,
                amount: package_.price,
                description: package_.description
            });

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Rukassa
            const response = await axios.post<RukassaCreatePaymentResponse>(
                `${RUKASSA_API_URL}/api/v1/create`,
                {
                    shop_id: RUKASSA_SHOP_ID,
                    order_id: merchantOrderId,
                    amount: package_.price.toString(),
                    currency: 'RUB',
                    desc: package_.description,
                    method: 'all',
                    success_url: 'https://t.me/photowombot',
                    fail_url: 'https://t.me/photowombot'
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                }
            );

            console.log('–û—Ç–≤–µ—Ç Rukassa:', response.data);

            if (!response.data.status || !response.data.pay_url) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ Rukassa:', response.data);
                throw new Error(response.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂');
            }

            return response.data.pay_url;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
            if (axios.isAxiosError(error)) {
                console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                    response: error.response?.data,
                    status: error.response?.status,
                    headers: error.response?.headers
                });
            }
            // –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            await this.pool.query(
                'DELETE FROM payments WHERE merchant_order_id = $1',
                [merchantOrderId]
            );
            throw error;
        }
    }

    async handleWebhook(data: RukassaWebhookBody): Promise<void> {
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ webhook:', data);

        if (!this.validateWebhookSign(data)) {
            console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook');
            throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
        }

        const client = await this.pool.connect();
        try {
            await client.query('BEGIN');

            const paymentResult = await client.query(
                'UPDATE payments SET status = $1, order_id = $2, updated_at = CURRENT_TIMESTAMP WHERE merchant_order_id = $3 RETURNING user_id, credits',
                [data.status, data.order_id, data.merchant_order_id]
            );

            if (paymentResult.rows.length === 0) {
                throw new Error('–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const { user_id, credits } = paymentResult.rows[0];

            // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            if (data.status === 'success') {
                console.log(`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}`);
                
                await client.query(
                    'UPDATE users SET credits = credits + $1 WHERE user_id = $2',
                    [credits, user_id]
                );

                await this.bot.telegram.sendMessage(
                    user_id,
                    `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ ${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.`
                );
            } else if (data.status === 'fail') {
                // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è
                await this.bot.telegram.sendMessage(
                    user_id,
                    '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.'
                );
            }

            await client.query('COMMIT');
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    async getPaymentStatus(userId: number, merchantOrderId: string): Promise<string> {
        try {
            const result = await this.pool.query(
                'SELECT status FROM payments WHERE user_id = $1 AND merchant_order_id = $2',
                [userId, merchantOrderId]
            );
            return result.rows[0]?.status || 'unknown';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }
}

export function setupPaymentCommands(bot: Telegraf) {
    bot.command('buy', async (ctx) => {
        const keyboard = Markup.inlineKeyboard(
            CREDIT_PACKAGES.map(pkg => [
                Markup.button.callback(
                    `${pkg.description} - ${pkg.price} ‚ÇΩ`,
                    `buy_${pkg.id}`
                )
            ])
        );

        await ctx.reply(
            'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:',
            keyboard
        );
    });
}

export function setupRukassaWebhook(app: express.Express, rukassaPayment: RukassaPayment) {
    app.post('/rukassa/webhook', express.json(), async (req, res) => {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Rukassa:', req.body);
            await rukassaPayment.handleWebhook(req.body);
            res.json({ status: 'success' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Rukassa:', error);
            res.status(400).json({ 
                status: 'error',
                message: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    });
}