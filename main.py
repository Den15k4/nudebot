import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import load_config
from database import Database, Base
from sqlalchemy import inspect
import stability_sdk.interfaces.gooseai.generation.generation_pb2 as generation
from stability_sdk import client
import io
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config.DATABASE_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stability API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
stability_api = client.StabilityInference(
    key=config.STABILITY_KEY,
    verbose=True,
    engine="stable-diffusion-xl-1024-v1-0"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SDXL 1.0
)

class UserState(StatesGroup):
    waiting_for_photo = State()
    choosing_style = State()

# –°—Ç–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
AVATAR_STYLES = {
    "–∫–æ—Å–º–æ–Ω–∞–≤—Ç": "same person wearing a detailed space suit, astronaut helmet, space background, highly detailed, professional photo",
    "–∫–∏–±–µ—Ä–ø–∞–Ω–∫": "same person in cyberpunk style, neon lights, futuristic city background, highly detailed",
    "—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π": "same person as a superhero, dynamic pose, city background, comic book style, highly detailed"
}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    try:
        logger.info(f"Processing /start command from user {message.from_user.id}")
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=keyboard
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        try:
            logger.info(f"Registering user {message.from_user.id}")
            db.register_user(message.from_user.id, message.from_user.username)
            
            logger.info(f"Checking subscription for user {message.from_user.id}")
            has_sub, images_left = db.check_subscription(message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            if has_sub:
                await message.answer(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")
                
        except Exception as db_error:
            logger.error(f"Database error in start command: {db_error}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â—ë —Ä–∞–∑."
        )

@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")
async def request_photo(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"
    """
    try:
        has_sub, images_left = db.check_subscription(message.from_user.id)
        
        if images_left <= 0:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        await UserState.waiting_for_photo.set()
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}")
        
    except Exception as e:
        logger.error(f"Error in request_photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(content_types=['photo'], state=UserState.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    """
    try:
        photo = await message.photo[-1].download(destination_file=io.BytesIO())
        
        async with state.proxy() as data:
            data['original_photo'] = photo.getvalue()
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for style in AVATAR_STYLES.keys():
            keyboard.add(types.KeyboardButton(style))
        
        await UserState.choosing_style.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∞:", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        await state.finish()

@dp.message_handler(state=UserState.choosing_style)
async def generate_avatar(message: types.Message, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
    """
    try:
        style = message.text
        if style not in AVATAR_STYLES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        
        async with state.proxy() as data:
            photo_bytes = data['original_photo']
        
        processing_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–≤–∞—Ç–∞—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(io.BytesIO(photo_bytes))
        image = image.resize((1024, 1024))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è SDXL
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            answers = stability_api.generate(
                prompt=AVATAR_STYLES[style],
                init_image=image,
                start_schedule=0.6,
                seed=123,
                steps=40,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                cfg_scale=7.0,  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏–ª—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–º–ø—Ç—É
                width=1024,
                height=1024,
                sampler=generation.SAMPLER_K_DPMPP_2M,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å—ç–º–ø–ª–µ—Ä
                samples=1,
                style_preset="photographic"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            for resp in answers:
                for artifact in resp.artifacts:
                    if artifact.type == generation.ARTIFACT_IMAGE:
                        img_bytes = io.BytesIO(artifact.binary)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        db.update_images_count(message.from_user.id)
                        has_sub, images_left = db.check_subscription(message.from_user.id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await message.answer_photo(
                            img_bytes,
                            caption=f"–í–æ—Ç –≤–∞—à –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ '{style}'!\n–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}"
                        )
            
        except Exception as gen_error:
            logger.error(f"Stability AI error: {gen_error}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
            
        finally:
            await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"Error generating avatar: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
        await message.answer("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –∞–≤–∞—Ç–∞—Ä?", reply_markup=keyboard)
        
async def on_startup(_):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot initialization...")
        logger.info("Bot started successfully")
    except Exception as e:
        logger.error(f"Failed to initialize bot: {e}")
        raise

def main():
    logger.info("Starting bot")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == '__main__':
    main()