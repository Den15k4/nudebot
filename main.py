import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import load_config
from database import Database
from sqlalchemy import inspect  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç inspect
import replicate
import io
from PIL import Image
import aiohttp
from datetime import datetime
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config.DATABASE_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Replicate –∫–ª–∏–µ–Ω—Ç–∞
replicate_client = replicate.Client(api_token=config.REPLICATE_TOKEN)

# –°—Ç–∏–ª–∏ –∏ –ø—Ä–æ–º–ø—Ç—ã
STYLES = {
    "–∫–æ—Å–º–æ–Ω–∞–≤—Ç": {
        "prompt": (
            "change ONLY the clothes to a detailed white NASA spacesuit with helmet, "
            "keep face EXACTLY the same, keep hair EXACTLY the same, "
            "keep background EXACTLY the same, maintain facial expression, maintain pose, "
            "photorealistic, detailed, high quality"
        ),
        "negative_prompt": (
            "different face, changed face, modified features, different person, "
            "deformed, distorted, cartoon, artistic, painting, drawing, anime, "
            "different hairstyle, different expression"
        )
    },
    "–∫–∏–±–µ—Ä–ø–∞–Ω–∫": {
        "prompt": (
            "change ONLY the clothes to futuristic cyberpunk outfit with neon accents, "
            "keep face EXACTLY the same, keep hair EXACTLY the same, "
            "keep background EXACTLY the same, maintain facial expression, maintain pose, "
            "photorealistic, detailed, high quality"
        ),
        "negative_prompt": (
            "different face, changed face, modified features, different person, "
            "deformed, distorted, cartoon, artistic, painting, drawing, anime, "
            "different hairstyle, different expression"
        )
    },
    "—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π": {
        "prompt": (
            "change ONLY the clothes to modern superhero costume with subtle details, "
            "keep face EXACTLY the same, keep hair EXACTLY the same, "
            "keep background EXACTLY the same, maintain facial expression, maintain pose, "
            "photorealistic, detailed, high quality"
        ),
        "negative_prompt": (
            "different face, changed face, modified features, different person, "
            "deformed, distorted, cartoon, artistic, painting, drawing, anime, "
            "different hairstyle, different expression"
        )
    }
}

class UserState(StatesGroup):
    waiting_for_photo = State()
    choosing_style = State()

def prepare_image(image_bytes: bytes) -> bytes:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_bytes))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        max_size = 1024
        ratio = min(max_size/image.size[0], max_size/image.size[1])
        new_size = (int(image.size[0]*ratio), int(image.size[1]*ratio))
        image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
        buffer = io.BytesIO()
        image.save(buffer, format='PNG')
        buffer.seek(0)
        
        return buffer.getvalue()
    except Exception as e:
        logger.error(f"Error preparing image: {e}")
        raise

async def process_image_with_replicate(image_bytes: bytes, style: str) -> bytes:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate API"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        prepared_image = prepare_image(image_bytes)
        
        logger.info(f"Starting image processing with style: {style}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å
        output = replicate_client.run(
            "timothybrooks/instruct-pix2pix:30c1d0b916a6f8efce20493f5d61ee27491ab2a60437c13c588468b9810ec23f",
            input={
                "image": prepared_image,
                "prompt": STYLES[style]["prompt"],
                "negative_prompt": STYLES[style]["negative_prompt"],
                "num_outputs": 1,
                "guidance_scale": 7.5,
                "image_guidance_scale": 1.5,
                "steps": 100
            }
        )
        
        logger.info("Image processing completed")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(output, list) and len(output) > 0:
            image_url = output[0]
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as response:
                    if response.status == 200:
                        return await response.read()
        
        raise ValueError("Failed to get valid output from Replicate")
    
    except Exception as e:
        logger.error(f"Error in process_image_with_replicate: {e}\n{traceback.format_exc()}")
        raise

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Processing /start command from user {message.from_user.id}")
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.register_user(message.from_user.id, message.from_user.username)
            has_sub, images_left = db.check_subscription(message.from_user.id)
            
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                reply_markup=keyboard
            )
            
            await message.answer(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}")
            
        except Exception as db_error:
            logger.error(f"Database error in start command: {db_error}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")
async def request_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"""
    try:
        has_sub, images_left = db.check_subscription(message.from_user.id)
        
        if images_left <= 0:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        await UserState.waiting_for_photo.set()
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}")
        
    except Exception as e:
        logger.error(f"Error in request_photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(content_types=['photo'], state=UserState.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        photo = await message.photo[-1].download(destination_file=io.BytesIO())
        
        async with state.proxy() as data:
            data['original_photo'] = photo.getvalue()
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for style in STYLES.keys():
            keyboard.add(types.KeyboardButton(style))
        
        await UserState.choosing_style.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∞:", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        await state.finish()

@dp.message_handler(state=UserState.choosing_style)
async def generate_avatar(message: types.Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
    try:
        style = message.text
        if style not in STYLES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        
        async with state.proxy() as data:
            photo_bytes = data['original_photo']
        
        processing_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–≤–∞—Ç–∞—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result_bytes = await process_image_with_replicate(photo_bytes, style)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            db.update_images_count(message.from_user.id)
            has_sub, images_left = db.check_subscription(message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer_photo(
                result_bytes,
                caption=f"–í–æ—Ç –≤–∞—à –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ '{style}'!\n–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}"
            )
            
        except Exception as gen_error:
            logger.error(f"Generation error: {gen_error}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
            
        finally:
            try:
                await processing_msg.delete()
            except Exception as e:
                logger.error(f"Error deleting processing message: {e}")
        
    except Exception as e:
        logger.error(f"Error generating avatar: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
        await message.answer("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –∞–≤–∞—Ç–∞—Ä?", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"))
    await message.answer(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=keyboard
    )

async def on_startup(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot starting...")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("Checking database connection...")
        inspector = inspect(db.engine)
        tables = inspector.get_table_names()
        logger.info(f"Connected to database. Available tables: {tables}")
        
        logger.info("Bot started successfully")
        
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise
    
    logger.info("Bot started successfully")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logger.error(f"Critical error: {e}\n{traceback.format_exc()}")
        raise